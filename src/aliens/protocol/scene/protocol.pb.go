// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol.proto

/*
	Package scene is a generated protocol buffer package.

	It is generated from these files:
		protocol.proto
		resultcode.proto
		scene.proto

	It has these top-level messages:
		Request
		Response
		Vector
		Entity
		SpaceEnter
		SpaceEnterRet
		SpaceMove
		SpaceMoveRet
		SpaceLeave
		SpaceLeaveRet
		GetState
		GetStateRet
		SpacePush
*/
package scene

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// request
type Request struct {
	Session int32 `protobuf:"varint,1,opt,name=session,proto3" json:"session,omitempty"`
	// Types that are valid to be assigned to Request:
	//	*Request_SpaceMove
	//	*Request_SpaceEnter
	//	*Request_SpaceLeave
	//	*Request_GetState
	Request isRequest_Request `protobuf_oneof:"request"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{0} }

type isRequest_Request interface {
	isRequest_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Request_SpaceMove struct {
	SpaceMove *SpaceMove `protobuf:"bytes,5,opt,name=spaceMove,oneof"`
}
type Request_SpaceEnter struct {
	SpaceEnter *SpaceEnter `protobuf:"bytes,6,opt,name=spaceEnter,oneof"`
}
type Request_SpaceLeave struct {
	SpaceLeave *SpaceLeave `protobuf:"bytes,7,opt,name=spaceLeave,oneof"`
}
type Request_GetState struct {
	GetState *GetState `protobuf:"bytes,8,opt,name=getState,oneof"`
}

func (*Request_SpaceMove) isRequest_Request()  {}
func (*Request_SpaceEnter) isRequest_Request() {}
func (*Request_SpaceLeave) isRequest_Request() {}
func (*Request_GetState) isRequest_Request()   {}

func (m *Request) GetRequest() isRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Request) GetSession() int32 {
	if m != nil {
		return m.Session
	}
	return 0
}

func (m *Request) GetSpaceMove() *SpaceMove {
	if x, ok := m.GetRequest().(*Request_SpaceMove); ok {
		return x.SpaceMove
	}
	return nil
}

func (m *Request) GetSpaceEnter() *SpaceEnter {
	if x, ok := m.GetRequest().(*Request_SpaceEnter); ok {
		return x.SpaceEnter
	}
	return nil
}

func (m *Request) GetSpaceLeave() *SpaceLeave {
	if x, ok := m.GetRequest().(*Request_SpaceLeave); ok {
		return x.SpaceLeave
	}
	return nil
}

func (m *Request) GetGetState() *GetState {
	if x, ok := m.GetRequest().(*Request_GetState); ok {
		return x.GetState
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Request) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Request_OneofMarshaler, _Request_OneofUnmarshaler, _Request_OneofSizer, []interface{}{
		(*Request_SpaceMove)(nil),
		(*Request_SpaceEnter)(nil),
		(*Request_SpaceLeave)(nil),
		(*Request_GetState)(nil),
	}
}

func _Request_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Request)
	// request
	switch x := m.Request.(type) {
	case *Request_SpaceMove:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SpaceMove); err != nil {
			return err
		}
	case *Request_SpaceEnter:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SpaceEnter); err != nil {
			return err
		}
	case *Request_SpaceLeave:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SpaceLeave); err != nil {
			return err
		}
	case *Request_GetState:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetState); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Request.Request has unexpected type %T", x)
	}
	return nil
}

func _Request_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Request)
	switch tag {
	case 5: // request.spaceMove
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SpaceMove)
		err := b.DecodeMessage(msg)
		m.Request = &Request_SpaceMove{msg}
		return true, err
	case 6: // request.spaceEnter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SpaceEnter)
		err := b.DecodeMessage(msg)
		m.Request = &Request_SpaceEnter{msg}
		return true, err
	case 7: // request.spaceLeave
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SpaceLeave)
		err := b.DecodeMessage(msg)
		m.Request = &Request_SpaceLeave{msg}
		return true, err
	case 8: // request.getState
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetState)
		err := b.DecodeMessage(msg)
		m.Request = &Request_GetState{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Request_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Request)
	// request
	switch x := m.Request.(type) {
	case *Request_SpaceMove:
		s := proto.Size(x.SpaceMove)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_SpaceEnter:
		s := proto.Size(x.SpaceEnter)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_SpaceLeave:
		s := proto.Size(x.SpaceLeave)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_GetState:
		s := proto.Size(x.GetState)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// response
type Response struct {
	Session int32 `protobuf:"varint,1,opt,name=session,proto3" json:"session,omitempty"`
	Code    Code  `protobuf:"varint,2,opt,name=code,proto3,enum=scene.Code" json:"code,omitempty"`
	// Types that are valid to be assigned to Response:
	//	*Response_SpaceMoveRet
	//	*Response_SpaceEnterRet
	//	*Response_SpaceLeaveRet
	//	*Response_GetStateRet
	Response isResponse_Response `protobuf_oneof:"response"`
	// Types that are valid to be assigned to Push:
	//	*Response_ScenePush
	//	*Response_SpacePush
	Push isResponse_Push `protobuf_oneof:"push"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{1} }

type isResponse_Response interface {
	isResponse_Response()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isResponse_Push interface {
	isResponse_Push()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Response_SpaceMoveRet struct {
	SpaceMoveRet *SpaceMoveRet `protobuf:"bytes,5,opt,name=spaceMoveRet,oneof"`
}
type Response_SpaceEnterRet struct {
	SpaceEnterRet *SpaceEnterRet `protobuf:"bytes,6,opt,name=spaceEnterRet,oneof"`
}
type Response_SpaceLeaveRet struct {
	SpaceLeaveRet *SpaceLeaveRet `protobuf:"bytes,7,opt,name=spaceLeaveRet,oneof"`
}
type Response_GetStateRet struct {
	GetStateRet *GetStateRet `protobuf:"bytes,8,opt,name=getStateRet,oneof"`
}
type Response_ScenePush struct {
	ScenePush string `protobuf:"bytes,500,opt,name=scenePush,proto3,oneof"`
}
type Response_SpacePush struct {
	SpacePush *SpacePush `protobuf:"bytes,501,opt,name=spacePush,oneof"`
}

func (*Response_SpaceMoveRet) isResponse_Response()  {}
func (*Response_SpaceEnterRet) isResponse_Response() {}
func (*Response_SpaceLeaveRet) isResponse_Response() {}
func (*Response_GetStateRet) isResponse_Response()   {}
func (*Response_ScenePush) isResponse_Push()         {}
func (*Response_SpacePush) isResponse_Push()         {}

func (m *Response) GetResponse() isResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}
func (m *Response) GetPush() isResponse_Push {
	if m != nil {
		return m.Push
	}
	return nil
}

func (m *Response) GetSession() int32 {
	if m != nil {
		return m.Session
	}
	return 0
}

func (m *Response) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_Success
}

func (m *Response) GetSpaceMoveRet() *SpaceMoveRet {
	if x, ok := m.GetResponse().(*Response_SpaceMoveRet); ok {
		return x.SpaceMoveRet
	}
	return nil
}

func (m *Response) GetSpaceEnterRet() *SpaceEnterRet {
	if x, ok := m.GetResponse().(*Response_SpaceEnterRet); ok {
		return x.SpaceEnterRet
	}
	return nil
}

func (m *Response) GetSpaceLeaveRet() *SpaceLeaveRet {
	if x, ok := m.GetResponse().(*Response_SpaceLeaveRet); ok {
		return x.SpaceLeaveRet
	}
	return nil
}

func (m *Response) GetGetStateRet() *GetStateRet {
	if x, ok := m.GetResponse().(*Response_GetStateRet); ok {
		return x.GetStateRet
	}
	return nil
}

func (m *Response) GetScenePush() string {
	if x, ok := m.GetPush().(*Response_ScenePush); ok {
		return x.ScenePush
	}
	return ""
}

func (m *Response) GetSpacePush() *SpacePush {
	if x, ok := m.GetPush().(*Response_SpacePush); ok {
		return x.SpacePush
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Response) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Response_OneofMarshaler, _Response_OneofUnmarshaler, _Response_OneofSizer, []interface{}{
		(*Response_SpaceMoveRet)(nil),
		(*Response_SpaceEnterRet)(nil),
		(*Response_SpaceLeaveRet)(nil),
		(*Response_GetStateRet)(nil),
		(*Response_ScenePush)(nil),
		(*Response_SpacePush)(nil),
	}
}

func _Response_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Response)
	// response
	switch x := m.Response.(type) {
	case *Response_SpaceMoveRet:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SpaceMoveRet); err != nil {
			return err
		}
	case *Response_SpaceEnterRet:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SpaceEnterRet); err != nil {
			return err
		}
	case *Response_SpaceLeaveRet:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SpaceLeaveRet); err != nil {
			return err
		}
	case *Response_GetStateRet:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetStateRet); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Response.Response has unexpected type %T", x)
	}
	// push
	switch x := m.Push.(type) {
	case *Response_ScenePush:
		_ = b.EncodeVarint(500<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ScenePush)
	case *Response_SpacePush:
		_ = b.EncodeVarint(501<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SpacePush); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Response.Push has unexpected type %T", x)
	}
	return nil
}

func _Response_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Response)
	switch tag {
	case 5: // response.spaceMoveRet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SpaceMoveRet)
		err := b.DecodeMessage(msg)
		m.Response = &Response_SpaceMoveRet{msg}
		return true, err
	case 6: // response.spaceEnterRet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SpaceEnterRet)
		err := b.DecodeMessage(msg)
		m.Response = &Response_SpaceEnterRet{msg}
		return true, err
	case 7: // response.spaceLeaveRet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SpaceLeaveRet)
		err := b.DecodeMessage(msg)
		m.Response = &Response_SpaceLeaveRet{msg}
		return true, err
	case 8: // response.getStateRet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetStateRet)
		err := b.DecodeMessage(msg)
		m.Response = &Response_GetStateRet{msg}
		return true, err
	case 500: // push.scenePush
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Push = &Response_ScenePush{x}
		return true, err
	case 501: // push.spacePush
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SpacePush)
		err := b.DecodeMessage(msg)
		m.Push = &Response_SpacePush{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Response_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Response)
	// response
	switch x := m.Response.(type) {
	case *Response_SpaceMoveRet:
		s := proto.Size(x.SpaceMoveRet)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_SpaceEnterRet:
		s := proto.Size(x.SpaceEnterRet)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_SpaceLeaveRet:
		s := proto.Size(x.SpaceLeaveRet)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_GetStateRet:
		s := proto.Size(x.GetStateRet)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// push
	switch x := m.Push.(type) {
	case *Response_ScenePush:
		n += proto.SizeVarint(500<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ScenePush)))
		n += len(x.ScenePush)
	case *Response_SpacePush:
		s := proto.Size(x.SpacePush)
		n += proto.SizeVarint(501<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Request)(nil), "scene.Request")
	proto.RegisterType((*Response)(nil), "scene.Response")
}
func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Session != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Session))
	}
	if m.Request != nil {
		nn1, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Request_SpaceMove) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SpaceMove != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.SpaceMove.Size()))
		n2, err := m.SpaceMove.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Request_SpaceEnter) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SpaceEnter != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.SpaceEnter.Size()))
		n3, err := m.SpaceEnter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Request_SpaceLeave) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SpaceLeave != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.SpaceLeave.Size()))
		n4, err := m.SpaceLeave.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Request_GetState) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetState != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.GetState.Size()))
		n5, err := m.GetState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Session != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Session))
	}
	if m.Code != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Code))
	}
	if m.Response != nil {
		nn6, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	if m.Push != nil {
		nn7, err := m.Push.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	return i, nil
}

func (m *Response_SpaceMoveRet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SpaceMoveRet != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.SpaceMoveRet.Size()))
		n8, err := m.SpaceMoveRet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Response_SpaceEnterRet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SpaceEnterRet != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.SpaceEnterRet.Size()))
		n9, err := m.SpaceEnterRet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Response_SpaceLeaveRet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SpaceLeaveRet != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.SpaceLeaveRet.Size()))
		n10, err := m.SpaceLeaveRet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Response_GetStateRet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetStateRet != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.GetStateRet.Size()))
		n11, err := m.GetStateRet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Response_ScenePush) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1f
	i++
	i = encodeVarintProtocol(dAtA, i, uint64(len(m.ScenePush)))
	i += copy(dAtA[i:], m.ScenePush)
	return i, nil
}
func (m *Response_SpacePush) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SpacePush != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1f
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.SpacePush.Size()))
		n12, err := m.SpacePush.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func encodeVarintProtocol(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Request) Size() (n int) {
	var l int
	_ = l
	if m.Session != 0 {
		n += 1 + sovProtocol(uint64(m.Session))
	}
	if m.Request != nil {
		n += m.Request.Size()
	}
	return n
}

func (m *Request_SpaceMove) Size() (n int) {
	var l int
	_ = l
	if m.SpaceMove != nil {
		l = m.SpaceMove.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *Request_SpaceEnter) Size() (n int) {
	var l int
	_ = l
	if m.SpaceEnter != nil {
		l = m.SpaceEnter.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *Request_SpaceLeave) Size() (n int) {
	var l int
	_ = l
	if m.SpaceLeave != nil {
		l = m.SpaceLeave.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *Request_GetState) Size() (n int) {
	var l int
	_ = l
	if m.GetState != nil {
		l = m.GetState.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.Session != 0 {
		n += 1 + sovProtocol(uint64(m.Session))
	}
	if m.Code != 0 {
		n += 1 + sovProtocol(uint64(m.Code))
	}
	if m.Response != nil {
		n += m.Response.Size()
	}
	if m.Push != nil {
		n += m.Push.Size()
	}
	return n
}

func (m *Response_SpaceMoveRet) Size() (n int) {
	var l int
	_ = l
	if m.SpaceMoveRet != nil {
		l = m.SpaceMoveRet.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *Response_SpaceEnterRet) Size() (n int) {
	var l int
	_ = l
	if m.SpaceEnterRet != nil {
		l = m.SpaceEnterRet.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *Response_SpaceLeaveRet) Size() (n int) {
	var l int
	_ = l
	if m.SpaceLeaveRet != nil {
		l = m.SpaceLeaveRet.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *Response_GetStateRet) Size() (n int) {
	var l int
	_ = l
	if m.GetStateRet != nil {
		l = m.GetStateRet.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *Response_ScenePush) Size() (n int) {
	var l int
	_ = l
	l = len(m.ScenePush)
	n += 2 + l + sovProtocol(uint64(l))
	return n
}
func (m *Response_SpacePush) Size() (n int) {
	var l int
	_ = l
	if m.SpacePush != nil {
		l = m.SpacePush.Size()
		n += 2 + l + sovProtocol(uint64(l))
	}
	return n
}

func sovProtocol(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProtocol(x uint64) (n int) {
	return sovProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			m.Session = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Session |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceMove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SpaceMove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_SpaceMove{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceEnter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SpaceEnter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_SpaceEnter{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceLeave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SpaceLeave{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_SpaceLeave{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetState{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_GetState{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			m.Session = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Session |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceMoveRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SpaceMoveRet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_SpaceMoveRet{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceEnterRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SpaceEnterRet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_SpaceEnterRet{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceLeaveRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SpaceLeaveRet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_SpaceLeaveRet{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetStateRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetStateRet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_GetStateRet{v}
			iNdEx = postIndex
		case 500:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScenePush", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Push = &Response_ScenePush{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 501:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpacePush", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SpacePush{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Push = &Response_SpacePush{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProtocol
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProtocol(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProtocol = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocol   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("protocol.proto", fileDescriptorProtocol) }

var fileDescriptorProtocol = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4d, 0x8a, 0xdb, 0x30,
	0x14, 0x80, 0xad, 0xe6, 0xc7, 0xf6, 0x73, 0x1b, 0x52, 0xd1, 0x16, 0x91, 0x85, 0x63, 0xb2, 0xf2,
	0x2a, 0xd0, 0xb4, 0x8b, 0x42, 0xa1, 0x0b, 0x97, 0x82, 0x17, 0x2d, 0x14, 0xf5, 0x00, 0x21, 0x75,
	0x1e, 0x49, 0x21, 0xb5, 0x5c, 0x4b, 0xce, 0x59, 0x7a, 0x81, 0xde, 0xa5, 0xcb, 0x39, 0xc2, 0x90,
	0xb9, 0xc2, 0xcc, 0x72, 0x60, 0x90, 0x2c, 0x3b, 0xf1, 0x24, 0xcc, 0x2a, 0xd1, 0xd3, 0xf7, 0x09,
	0xf4, 0x59, 0x30, 0x2a, 0x4a, 0xa1, 0x44, 0x26, 0x76, 0x73, 0xf3, 0x87, 0x0e, 0x64, 0x86, 0x39,
	0x4e, 0x02, 0xf3, 0x53, 0xcf, 0x26, 0xe3, 0x12, 0x65, 0xb5, 0x53, 0x99, 0x58, 0xdb, 0xc9, 0xec,
	0x9e, 0x80, 0xcb, 0xf1, 0x4f, 0x85, 0x52, 0x51, 0x06, 0xae, 0x44, 0x29, 0x7f, 0x89, 0x9c, 0x91,
	0x88, 0xc4, 0x03, 0xde, 0x2c, 0xe9, 0x5b, 0xf0, 0x65, 0xb1, 0xca, 0xf0, 0x9b, 0xd8, 0x23, 0x1b,
	0x44, 0x24, 0x0e, 0x16, 0x2f, 0xe7, 0xf5, 0xc1, 0x66, 0xbe, 0xfc, 0x2d, 0xf6, 0x98, 0x3a, 0xfc,
	0x48, 0xd1, 0xf7, 0x00, 0x66, 0xf1, 0x25, 0x57, 0x58, 0xb2, 0xa1, 0x71, 0x68, 0xc7, 0x41, 0xbd,
	0x93, 0x3a, 0xfc, 0x84, 0x6b, 0xad, 0xaf, 0xb8, 0xda, 0x23, 0x73, 0x2f, 0x58, 0x3b, 0xbd, 0xd3,
	0x5a, 0x86, 0xa3, 0x73, 0xf0, 0x36, 0xa8, 0x7e, 0xa8, 0x95, 0x42, 0xe6, 0x19, 0x67, 0x6c, 0x9d,
	0x0d, 0xaa, 0xa5, 0xd4, 0xf3, 0xd4, 0xe1, 0x2d, 0x93, 0xf8, 0xe0, 0x96, 0xf5, 0x9d, 0x67, 0xff,
	0x7a, 0xe0, 0x71, 0x94, 0x85, 0xc8, 0x25, 0x3e, 0x11, 0x60, 0x0a, 0x7d, 0x1d, 0x8d, 0x3d, 0x8b,
	0x48, 0x3c, 0x5a, 0x04, 0xf6, 0xf4, 0xcf, 0x62, 0x8d, 0xdc, 0x6c, 0xd0, 0x8f, 0xf0, 0xbc, 0xbd,
	0x3b, 0x47, 0x65, 0x23, 0xbd, 0x3e, 0x8b, 0xb4, 0x2c, 0x51, 0xa5, 0x0e, 0xef, 0xc0, 0xf4, 0x13,
	0xbc, 0x38, 0x36, 0xd0, 0x76, 0x9d, 0xeb, 0xcd, 0x79, 0x2e, 0xab, 0x77, 0xf1, 0xd6, 0x37, 0x35,
	0xb4, 0xef, 0x5e, 0xf0, 0x4d, 0xb8, 0x8e, 0xdf, 0xe0, 0xf4, 0x03, 0x04, 0x4d, 0x1b, 0x6d, 0xd7,
	0x09, 0x5f, 0x3d, 0x4e, 0x68, 0xdd, 0x53, 0x94, 0x4e, 0xc1, 0x37, 0xd4, 0xf7, 0x4a, 0x6e, 0xd9,
	0x6d, 0x2f, 0x22, 0xb1, 0x9f, 0x12, 0x7e, 0x9c, 0xd1, 0x85, 0x7d, 0x39, 0x06, 0xb8, 0xeb, 0x5d,
	0x78, 0x3a, 0x45, 0x25, 0xb7, 0xc6, 0x69, 0xb0, 0x04, 0xc0, 0x2b, 0xed, 0x27, 0x49, 0x86, 0xd0,
	0xd7, 0x40, 0x32, 0xfe, 0x7f, 0x08, 0xc9, 0xd5, 0x21, 0x24, 0xd7, 0x87, 0x90, 0xfc, 0xbd, 0x09,
	0x9d, 0x9f, 0x43, 0xf3, 0x80, 0xdf, 0x3d, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xfd, 0xfc, 0xa4,
	0xf8, 0x02, 0x00, 0x00,
}
