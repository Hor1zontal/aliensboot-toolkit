// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gate.proto

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type KickType int32

const (
	KickType_None           KickType = 0
	KickType_OtherSession   KickType = 1
	KickType_Timeout        KickType = 2
	KickType_ServerClose    KickType = 3
	KickType_ServerStop     KickType = 4
	KickType_ServerMaintain KickType = 5
)

var KickType_name = map[int32]string{
	0: "None",
	1: "OtherSession",
	2: "Timeout",
	3: "ServerClose",
	4: "ServerStop",
	5: "ServerMaintain",
}
var KickType_value = map[string]int32{
	"None":           0,
	"OtherSession":   1,
	"Timeout":        2,
	"ServerClose":    3,
	"ServerStop":     4,
	"ServerMaintain": 5,
}

func (x KickType) String() string {
	return proto.EnumName(KickType_name, int32(x))
}
func (KickType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGate, []int{0} }

type KickOut struct {
	AuthID   int64    `protobuf:"varint,1,opt,name=authID,proto3" json:"authID,omitempty"`
	KickType KickType `protobuf:"varint,2,opt,name=kickType,proto3,enum=protocol.KickType" json:"kickType,omitempty"`
}

func (m *KickOut) Reset()                    { *m = KickOut{} }
func (m *KickOut) String() string            { return proto.CompactTextString(m) }
func (*KickOut) ProtoMessage()               {}
func (*KickOut) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{0} }

func (m *KickOut) GetAuthID() int64 {
	if m != nil {
		return m.AuthID
	}
	return 0
}

func (m *KickOut) GetKickType() KickType {
	if m != nil {
		return m.KickType
	}
	return KickType_None
}

type BindService struct {
	AuthID int64             `protobuf:"varint,1,opt,name=authID,proto3" json:"authID,omitempty"`
	Binds  map[string]string `protobuf:"bytes,2,rep,name=binds" json:"binds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *BindService) Reset()                    { *m = BindService{} }
func (m *BindService) String() string            { return proto.CompactTextString(m) }
func (*BindService) ProtoMessage()               {}
func (*BindService) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{1} }

func (m *BindService) GetAuthID() int64 {
	if m != nil {
		return m.AuthID
	}
	return 0
}

func (m *BindService) GetBinds() map[string]string {
	if m != nil {
		return m.Binds
	}
	return nil
}

func init() {
	proto.RegisterType((*KickOut)(nil), "protocol.kick_out")
	proto.RegisterType((*BindService)(nil), "protocol.bind_service")
	proto.RegisterEnum("protocol.KickType", KickType_name, KickType_value)
}
func (m *KickOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickOut) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AuthID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGate(dAtA, i, uint64(m.AuthID))
	}
	if m.KickType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGate(dAtA, i, uint64(m.KickType))
	}
	return i, nil
}

func (m *BindService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindService) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AuthID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGate(dAtA, i, uint64(m.AuthID))
	}
	if len(m.Binds) > 0 {
		for k, _ := range m.Binds {
			dAtA[i] = 0x12
			i++
			v := m.Binds[k]
			mapSize := 1 + len(k) + sovGate(uint64(len(k))) + 1 + len(v) + sovGate(uint64(len(v)))
			i = encodeVarintGate(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGate(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGate(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func encodeVarintGate(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *KickOut) Size() (n int) {
	var l int
	_ = l
	if m.AuthID != 0 {
		n += 1 + sovGate(uint64(m.AuthID))
	}
	if m.KickType != 0 {
		n += 1 + sovGate(uint64(m.KickType))
	}
	return n
}

func (m *BindService) Size() (n int) {
	var l int
	_ = l
	if m.AuthID != 0 {
		n += 1 + sovGate(uint64(m.AuthID))
	}
	if len(m.Binds) > 0 {
		for k, v := range m.Binds {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGate(uint64(len(k))) + 1 + len(v) + sovGate(uint64(len(v)))
			n += mapEntrySize + 1 + sovGate(uint64(mapEntrySize))
		}
	}
	return n
}

func sovGate(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGate(x uint64) (n int) {
	return sovGate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KickOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kick_out: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kick_out: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthID", wireType)
			}
			m.AuthID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickType", wireType)
			}
			m.KickType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickType |= (KickType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: bind_service: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: bind_service: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthID", wireType)
			}
			m.AuthID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Binds == nil {
				m.Binds = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGate
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGate
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGate(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGate
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Binds[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGate
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGate
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGate(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGate = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGate   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("gate.proto", fileDescriptorGate) }

var fileDescriptorGate = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0x86, 0x99, 0x16, 0xb8, 0xe5, 0x40, 0xb8, 0x93, 0x13, 0x63, 0x88, 0x8b, 0x06, 0x59, 0x11,
	0x17, 0x5d, 0xe0, 0x42, 0xe2, 0x12, 0x75, 0x61, 0x8c, 0x9a, 0x0c, 0xec, 0x49, 0xc1, 0x13, 0x99,
	0x80, 0x33, 0x64, 0x3a, 0x6d, 0xd2, 0x37, 0xd1, 0x37, 0x72, 0xe9, 0x23, 0x98, 0xfa, 0x22, 0xa6,
	0x1d, 0x10, 0x37, 0xae, 0x66, 0xfe, 0x33, 0xdf, 0x7c, 0xf9, 0x0f, 0xc0, 0x73, 0x6c, 0x29, 0xda,
	0x1a, 0x6d, 0x35, 0x06, 0xd5, 0xb1, 0xd4, 0x9b, 0x81, 0x80, 0x60, 0x2d, 0x97, 0xeb, 0xb9, 0x4e,
	0x2d, 0x1e, 0x43, 0x33, 0x4e, 0xed, 0xea, 0xf6, 0xba, 0xc7, 0xfa, 0x6c, 0xe8, 0x8b, 0x5d, 0xc2,
	0xc8, 0x31, 0xb3, 0x7c, 0x4b, 0x3d, 0xaf, 0xcf, 0x86, 0xdd, 0x11, 0x46, 0x7b, 0x41, 0x74, 0xb7,
	0x7b, 0x11, 0x3f, 0xcc, 0xe0, 0x8d, 0x41, 0x67, 0x21, 0xd5, 0xd3, 0x3c, 0x21, 0x93, 0xc9, 0x25,
	0xfd, 0x29, 0xbe, 0x80, 0x46, 0xc9, 0x25, 0x3d, 0xaf, 0xef, 0x0f, 0xdb, 0xa3, 0xd3, 0x83, 0xf5,
	0xf7, 0xf7, 0x68, 0x52, 0x32, 0x37, 0xca, 0x9a, 0x5c, 0x38, 0xfe, 0x64, 0x0c, 0x70, 0x18, 0x22,
	0x07, 0x7f, 0x4d, 0x79, 0xe5, 0x6e, 0x89, 0xf2, 0x8a, 0x47, 0xd0, 0xc8, 0xe2, 0x4d, 0xea, 0xea,
	0xb6, 0x84, 0x0b, 0x97, 0xde, 0x98, 0x9d, 0xad, 0x20, 0xd8, 0x37, 0xc6, 0x00, 0xea, 0x0f, 0x5a,
	0x11, 0xaf, 0x21, 0x87, 0xce, 0xa3, 0x5d, 0x91, 0x99, 0x52, 0x92, 0x48, 0xad, 0x38, 0xc3, 0x36,
	0xfc, 0x9b, 0xc9, 0x17, 0xd2, 0xa9, 0xe5, 0x1e, 0xfe, 0x87, 0xf6, 0x94, 0x4c, 0x46, 0xe6, 0x6a,
	0xa3, 0x13, 0xe2, 0x3e, 0x76, 0x01, 0xdc, 0x60, 0x6a, 0xf5, 0x96, 0xd7, 0x11, 0xa1, 0xeb, 0xf2,
	0x7d, 0x2c, 0x95, 0x8d, 0xa5, 0xe2, 0x8d, 0x09, 0x7f, 0x2f, 0x42, 0xf6, 0x51, 0x84, 0xec, 0xb3,
	0x08, 0xd9, 0xeb, 0x57, 0x58, 0x5b, 0x34, 0xab, 0xf5, 0xce, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xe7, 0x1e, 0x25, 0x81, 0x8a, 0x01, 0x00, 0x00,
}
