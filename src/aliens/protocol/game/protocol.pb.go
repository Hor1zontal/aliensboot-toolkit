// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol.proto

package passport

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// request
type PassportRequest struct {
	Session int32 `protobuf:"varint,1,opt,name=session,proto3" json:"session,omitempty"`
	// -----------------登录模块接口---------------
	//
	// Types that are valid to be assigned to Request:
	//	*PassportRequest_LoginRegister
	//	*PassportRequest_LoginLogin
	//	*PassportRequest_NewInterface
	Request isPassportRequest_Request `protobuf_oneof:"request"`
}

func (m *PassportRequest) Reset()                    { *m = PassportRequest{} }
func (m *PassportRequest) String() string            { return proto.CompactTextString(m) }
func (*PassportRequest) ProtoMessage()               {}
func (*PassportRequest) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{0} }

type isPassportRequest_Request interface {
	isPassportRequest_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PassportRequest_LoginRegister struct {
	LoginRegister *LoginRegister `protobuf:"bytes,6,opt,name=loginRegister,oneof"`
}
type PassportRequest_LoginLogin struct {
	LoginLogin *LoginLogin `protobuf:"bytes,7,opt,name=loginLogin,oneof"`
}
type PassportRequest_NewInterface struct {
	NewInterface *NewInterface `protobuf:"bytes,10,opt,name=newInterface,oneof"`
}

func (*PassportRequest_LoginRegister) isPassportRequest_Request() {}
func (*PassportRequest_LoginLogin) isPassportRequest_Request()    {}
func (*PassportRequest_NewInterface) isPassportRequest_Request()  {}

func (m *PassportRequest) GetRequest() isPassportRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *PassportRequest) GetSession() int32 {
	if m != nil {
		return m.Session
	}
	return 0
}

func (m *PassportRequest) GetLoginRegister() *LoginRegister {
	if x, ok := m.GetRequest().(*PassportRequest_LoginRegister); ok {
		return x.LoginRegister
	}
	return nil
}

func (m *PassportRequest) GetLoginLogin() *LoginLogin {
	if x, ok := m.GetRequest().(*PassportRequest_LoginLogin); ok {
		return x.LoginLogin
	}
	return nil
}

func (m *PassportRequest) GetNewInterface() *NewInterface {
	if x, ok := m.GetRequest().(*PassportRequest_NewInterface); ok {
		return x.NewInterface
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PassportRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PassportRequest_OneofMarshaler, _PassportRequest_OneofUnmarshaler, _PassportRequest_OneofSizer, []interface{}{
		(*PassportRequest_LoginRegister)(nil),
		(*PassportRequest_LoginLogin)(nil),
		(*PassportRequest_NewInterface)(nil),
	}
}

func _PassportRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PassportRequest)
	// request
	switch x := m.Request.(type) {
	case *PassportRequest_LoginRegister:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LoginRegister); err != nil {
			return err
		}
	case *PassportRequest_LoginLogin:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LoginLogin); err != nil {
			return err
		}
	case *PassportRequest_NewInterface:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewInterface); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PassportRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _PassportRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PassportRequest)
	switch tag {
	case 6: // request.loginRegister
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LoginRegister)
		err := b.DecodeMessage(msg)
		m.Request = &PassportRequest_LoginRegister{msg}
		return true, err
	case 7: // request.loginLogin
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LoginLogin)
		err := b.DecodeMessage(msg)
		m.Request = &PassportRequest_LoginLogin{msg}
		return true, err
	case 10: // request.newInterface
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NewInterface)
		err := b.DecodeMessage(msg)
		m.Request = &PassportRequest_NewInterface{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PassportRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PassportRequest)
	// request
	switch x := m.Request.(type) {
	case *PassportRequest_LoginRegister:
		s := proto.Size(x.LoginRegister)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PassportRequest_LoginLogin:
		s := proto.Size(x.LoginLogin)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PassportRequest_NewInterface:
		s := proto.Size(x.NewInterface)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// response
type PassportResponse struct {
	Session int32 `protobuf:"varint,1,opt,name=session,proto3" json:"session,omitempty"`
	AuthID  int32 `protobuf:"varint,2,opt,name=authID,proto3" json:"authID,omitempty"`
	// -----------------登录服接口---------------
	//
	// Types that are valid to be assigned to Response:
	//	*PassportResponse_Exception
	//	*PassportResponse_LoginRegisterRet
	//	*PassportResponse_LoginLoginRet
	//	*PassportResponse_NewInterfaceRet
	Response isPassportResponse_Response `protobuf_oneof:"response"`
}

func (m *PassportResponse) Reset()                    { *m = PassportResponse{} }
func (m *PassportResponse) String() string            { return proto.CompactTextString(m) }
func (*PassportResponse) ProtoMessage()               {}
func (*PassportResponse) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{1} }

type isPassportResponse_Response interface {
	isPassportResponse_Response()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PassportResponse_Exception struct {
	Exception uint32 `protobuf:"varint,3,opt,name=exception,proto3,oneof"`
}
type PassportResponse_LoginRegisterRet struct {
	LoginRegisterRet *LoginRegisterRet `protobuf:"bytes,6,opt,name=loginRegisterRet,oneof"`
}
type PassportResponse_LoginLoginRet struct {
	LoginLoginRet *LoginLoginRet `protobuf:"bytes,7,opt,name=loginLoginRet,oneof"`
}
type PassportResponse_NewInterfaceRet struct {
	NewInterfaceRet *NewInterfaceRet `protobuf:"bytes,10,opt,name=newInterfaceRet,oneof"`
}

func (*PassportResponse_Exception) isPassportResponse_Response()        {}
func (*PassportResponse_LoginRegisterRet) isPassportResponse_Response() {}
func (*PassportResponse_LoginLoginRet) isPassportResponse_Response()    {}
func (*PassportResponse_NewInterfaceRet) isPassportResponse_Response()  {}

func (m *PassportResponse) GetResponse() isPassportResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *PassportResponse) GetSession() int32 {
	if m != nil {
		return m.Session
	}
	return 0
}

func (m *PassportResponse) GetAuthID() int32 {
	if m != nil {
		return m.AuthID
	}
	return 0
}

func (m *PassportResponse) GetException() uint32 {
	if x, ok := m.GetResponse().(*PassportResponse_Exception); ok {
		return x.Exception
	}
	return 0
}

func (m *PassportResponse) GetLoginRegisterRet() *LoginRegisterRet {
	if x, ok := m.GetResponse().(*PassportResponse_LoginRegisterRet); ok {
		return x.LoginRegisterRet
	}
	return nil
}

func (m *PassportResponse) GetLoginLoginRet() *LoginLoginRet {
	if x, ok := m.GetResponse().(*PassportResponse_LoginLoginRet); ok {
		return x.LoginLoginRet
	}
	return nil
}

func (m *PassportResponse) GetNewInterfaceRet() *NewInterfaceRet {
	if x, ok := m.GetResponse().(*PassportResponse_NewInterfaceRet); ok {
		return x.NewInterfaceRet
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PassportResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PassportResponse_OneofMarshaler, _PassportResponse_OneofUnmarshaler, _PassportResponse_OneofSizer, []interface{}{
		(*PassportResponse_Exception)(nil),
		(*PassportResponse_LoginRegisterRet)(nil),
		(*PassportResponse_LoginLoginRet)(nil),
		(*PassportResponse_NewInterfaceRet)(nil),
	}
}

func _PassportResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PassportResponse)
	// response
	switch x := m.Response.(type) {
	case *PassportResponse_Exception:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Exception))
	case *PassportResponse_LoginRegisterRet:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LoginRegisterRet); err != nil {
			return err
		}
	case *PassportResponse_LoginLoginRet:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LoginLoginRet); err != nil {
			return err
		}
	case *PassportResponse_NewInterfaceRet:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewInterfaceRet); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PassportResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _PassportResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PassportResponse)
	switch tag {
	case 3: // response.exception
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Response = &PassportResponse_Exception{uint32(x)}
		return true, err
	case 6: // response.loginRegisterRet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LoginRegisterRet)
		err := b.DecodeMessage(msg)
		m.Response = &PassportResponse_LoginRegisterRet{msg}
		return true, err
	case 7: // response.loginLoginRet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LoginLoginRet)
		err := b.DecodeMessage(msg)
		m.Response = &PassportResponse_LoginLoginRet{msg}
		return true, err
	case 10: // response.newInterfaceRet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NewInterfaceRet)
		err := b.DecodeMessage(msg)
		m.Response = &PassportResponse_NewInterfaceRet{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PassportResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PassportResponse)
	// response
	switch x := m.Response.(type) {
	case *PassportResponse_Exception:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Exception))
	case *PassportResponse_LoginRegisterRet:
		s := proto.Size(x.LoginRegisterRet)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PassportResponse_LoginLoginRet:
		s := proto.Size(x.LoginLoginRet)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PassportResponse_NewInterfaceRet:
		s := proto.Size(x.NewInterfaceRet)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*PassportRequest)(nil), "passport.PassportRequest")
	proto.RegisterType((*PassportResponse)(nil), "passport.PassportResponse")
}
func (m *PassportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PassportRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Session != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Session))
	}
	if m.Request != nil {
		nn1, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *PassportRequest_LoginRegister) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LoginRegister != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.LoginRegister.Size()))
		n2, err := m.LoginRegister.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *PassportRequest_LoginLogin) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LoginLogin != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.LoginLogin.Size()))
		n3, err := m.LoginLogin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *PassportRequest_NewInterface) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NewInterface != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.NewInterface.Size()))
		n4, err := m.NewInterface.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *PassportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PassportResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Session != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Session))
	}
	if m.AuthID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.AuthID))
	}
	if m.Response != nil {
		nn5, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	return i, nil
}

func (m *PassportResponse_Exception) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintProtocol(dAtA, i, uint64(m.Exception))
	return i, nil
}
func (m *PassportResponse_LoginRegisterRet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LoginRegisterRet != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.LoginRegisterRet.Size()))
		n6, err := m.LoginRegisterRet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *PassportResponse_LoginLoginRet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LoginLoginRet != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.LoginLoginRet.Size()))
		n7, err := m.LoginLoginRet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *PassportResponse_NewInterfaceRet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NewInterfaceRet != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.NewInterfaceRet.Size()))
		n8, err := m.NewInterfaceRet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func encodeVarintProtocol(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PassportRequest) Size() (n int) {
	var l int
	_ = l
	if m.Session != 0 {
		n += 1 + sovProtocol(uint64(m.Session))
	}
	if m.Request != nil {
		n += m.Request.Size()
	}
	return n
}

func (m *PassportRequest_LoginRegister) Size() (n int) {
	var l int
	_ = l
	if m.LoginRegister != nil {
		l = m.LoginRegister.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *PassportRequest_LoginLogin) Size() (n int) {
	var l int
	_ = l
	if m.LoginLogin != nil {
		l = m.LoginLogin.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *PassportRequest_NewInterface) Size() (n int) {
	var l int
	_ = l
	if m.NewInterface != nil {
		l = m.NewInterface.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *PassportResponse) Size() (n int) {
	var l int
	_ = l
	if m.Session != 0 {
		n += 1 + sovProtocol(uint64(m.Session))
	}
	if m.AuthID != 0 {
		n += 1 + sovProtocol(uint64(m.AuthID))
	}
	if m.Response != nil {
		n += m.Response.Size()
	}
	return n
}

func (m *PassportResponse_Exception) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovProtocol(uint64(m.Exception))
	return n
}
func (m *PassportResponse_LoginRegisterRet) Size() (n int) {
	var l int
	_ = l
	if m.LoginRegisterRet != nil {
		l = m.LoginRegisterRet.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *PassportResponse_LoginLoginRet) Size() (n int) {
	var l int
	_ = l
	if m.LoginLoginRet != nil {
		l = m.LoginLoginRet.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *PassportResponse_NewInterfaceRet) Size() (n int) {
	var l int
	_ = l
	if m.NewInterfaceRet != nil {
		l = m.NewInterfaceRet.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func sovProtocol(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProtocol(x uint64) (n int) {
	return sovProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PassportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PassportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PassportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			m.Session = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Session |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginRegister", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LoginRegister{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &PassportRequest_LoginRegister{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginLogin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LoginLogin{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &PassportRequest_LoginLogin{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NewInterface{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &PassportRequest_NewInterface{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PassportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PassportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PassportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			m.Session = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Session |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthID", wireType)
			}
			m.AuthID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exception", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Response = &PassportResponse_Exception{v}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginRegisterRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LoginRegisterRet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &PassportResponse_LoginRegisterRet{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginLoginRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LoginLoginRet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &PassportResponse_LoginLoginRet{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewInterfaceRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NewInterfaceRet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &PassportResponse_NewInterfaceRet{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProtocol
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProtocol(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProtocol = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocol   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("protocol.proto", fileDescriptorProtocol) }

var fileDescriptorProtocol = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4d, 0x4a, 0x03, 0x31,
	0x14, 0xc7, 0x93, 0x8a, 0xfd, 0x78, 0xda, 0x0f, 0x02, 0x6a, 0xfc, 0x60, 0x28, 0x5d, 0x75, 0xd5,
	0x85, 0x2e, 0x5c, 0x09, 0x5a, 0x04, 0xa7, 0xd2, 0x85, 0xe4, 0x02, 0xa5, 0x96, 0x67, 0x1d, 0x28,
	0xc9, 0x98, 0xa4, 0xd4, 0xa3, 0x78, 0xa4, 0x2e, 0x3d, 0x82, 0xd4, 0x0b, 0x78, 0x04, 0x99, 0x4c,
	0xc6, 0xe9, 0x54, 0xeb, 0x26, 0x24, 0xef, 0xff, 0x7e, 0x0f, 0xde, 0x8f, 0x40, 0x23, 0xd6, 0xca,
	0xaa, 0x89, 0x9a, 0xf5, 0xdc, 0x85, 0x55, 0xe3, 0xb1, 0x31, 0xb1, 0xd2, 0xf6, 0xa4, 0x91, 0xdd,
	0xd2, 0xa4, 0xf3, 0x45, 0xa1, 0xf9, 0xe0, 0x4b, 0x02, 0x5f, 0xe6, 0x68, 0x2c, 0xe3, 0x50, 0x31,
	0x68, 0x4c, 0xa4, 0x24, 0xa7, 0x6d, 0xda, 0xdd, 0x15, 0xd9, 0x93, 0x5d, 0x43, 0x7d, 0xa6, 0xa6,
	0x91, 0x14, 0x38, 0x8d, 0x8c, 0x45, 0xcd, 0xcb, 0x6d, 0xda, 0xdd, 0x3b, 0xe7, 0xbd, 0x9f, 0xa9,
	0x2e, 0x1e, 0x69, 0x9f, 0x87, 0x44, 0x14, 0x01, 0x76, 0x09, 0xe0, 0x0a, 0xc3, 0xe4, 0xe0, 0x15,
	0x87, 0x1f, 0x6c, 0xe2, 0xee, 0x0c, 0x89, 0x58, 0x6b, 0x65, 0x57, 0xb0, 0x2f, 0x71, 0x31, 0x90,
	0x16, 0xf5, 0xd3, 0x78, 0x82, 0x1c, 0x1c, 0x7a, 0x94, 0xa3, 0x12, 0x17, 0xa3, 0x28, 0x8b, 0x43,
	0x22, 0x0a, 0xed, 0xfd, 0x1a, 0x54, 0x74, 0xba, 0x5e, 0x67, 0x59, 0x82, 0x56, 0xbe, 0xb2, 0x89,
	0x95, 0x34, 0xf8, 0xcf, 0xce, 0x87, 0x50, 0x1e, 0xcf, 0xed, 0xf3, 0xe0, 0x96, 0x97, 0x5c, 0xe0,
	0x5f, 0x2c, 0x80, 0x1a, 0xbe, 0x4e, 0x30, 0xb6, 0x09, 0xb3, 0xd3, 0xa6, 0xdd, 0x7a, 0x48, 0x44,
	0x5e, 0x62, 0xf7, 0xd0, 0x2a, 0xac, 0x2e, 0xd0, 0x7a, 0x5d, 0x67, 0xdb, 0x74, 0x8d, 0x34, 0xda,
	0x90, 0x88, 0x5f, 0x1c, 0xbb, 0xf1, 0xde, 0x87, 0x69, 0x60, 0xbd, 0xb8, 0xe3, 0x3f, 0xc5, 0xf9,
	0x29, 0x45, 0x82, 0xdd, 0x41, 0x73, 0x5d, 0x48, 0x32, 0x24, 0x55, 0x78, 0xba, 0x45, 0xa1, 0x1f,
	0xb3, 0x49, 0xf5, 0x01, 0xaa, 0xda, 0x5b, 0xeb, 0xb7, 0x96, 0xab, 0x80, 0xbe, 0xaf, 0x02, 0xfa,
	0xb1, 0x0a, 0xe8, 0xdb, 0x67, 0x40, 0x1e, 0xcb, 0xee, 0x5b, 0x5d, 0x7c, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x1c, 0xcc, 0xc5, 0xb0, 0x82, 0x02, 0x00, 0x00,
}
