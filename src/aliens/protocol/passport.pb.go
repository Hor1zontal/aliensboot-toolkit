// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: passport.proto

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 服务端不允许login文件名存在,特改为bblogin
// 登录相关通讯协议
type LoginResult int32

const (
	LoginResult_loginSuccess  LoginResult = 0
	LoginResult_invalidUser   LoginResult = 1
	LoginResult_invalidPwd    LoginResult = 2
	LoginResult_forbiddenUser LoginResult = 3
	LoginResult_tokenExpire   LoginResult = 4
)

var LoginResult_name = map[int32]string{
	0: "loginSuccess",
	1: "invalidUser",
	2: "invalidPwd",
	3: "forbiddenUser",
	4: "tokenExpire",
}
var LoginResult_value = map[string]int32{
	"loginSuccess":  0,
	"invalidUser":   1,
	"invalidPwd":    2,
	"forbiddenUser": 3,
	"tokenExpire":   4,
}

func (x LoginResult) String() string {
	return proto.EnumName(LoginResult_name, int32(x))
}
func (LoginResult) EnumDescriptor() ([]byte, []int) { return fileDescriptorPassport, []int{0} }

type RegisterResult int32

const (
	RegisterResult_registerSuccess RegisterResult = 0
	RegisterResult_userExists      RegisterResult = 1
	RegisterResult_invalidFormat   RegisterResult = 2
)

var RegisterResult_name = map[int32]string{
	0: "registerSuccess",
	1: "userExists",
	2: "invalidFormat",
}
var RegisterResult_value = map[string]int32{
	"registerSuccess": 0,
	"userExists":      1,
	"invalidFormat":   2,
}

func (x RegisterResult) String() string {
	return proto.EnumName(RegisterResult_name, int32(x))
}
func (RegisterResult) EnumDescriptor() ([]byte, []int) { return fileDescriptorPassport, []int{1} }

// 普通注册账号
type C2S_UserRegister struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Server   int32  `protobuf:"varint,3,opt,name=server,proto3" json:"server,omitempty"`
}

func (m *C2S_UserRegister) Reset()                    { *m = C2S_UserRegister{} }
func (m *C2S_UserRegister) String() string            { return proto.CompactTextString(m) }
func (*C2S_UserRegister) ProtoMessage()               {}
func (*C2S_UserRegister) Descriptor() ([]byte, []int) { return fileDescriptorPassport, []int{0} }

func (m *C2S_UserRegister) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *C2S_UserRegister) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *C2S_UserRegister) GetServer() int32 {
	if m != nil {
		return m.Server
	}
	return 0
}

// 登录服务器注册账号返回
type S2C_UserRegister struct {
	Result RegisterResult `protobuf:"varint,1,opt,name=result,proto3,enum=protocol.RegisterResult" json:"result,omitempty"`
	Uid    int64          `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Token  string         `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Msg    string         `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *S2C_UserRegister) Reset()                    { *m = S2C_UserRegister{} }
func (m *S2C_UserRegister) String() string            { return proto.CompactTextString(m) }
func (*S2C_UserRegister) ProtoMessage()               {}
func (*S2C_UserRegister) Descriptor() ([]byte, []int) { return fileDescriptorPassport, []int{1} }

func (m *S2C_UserRegister) GetResult() RegisterResult {
	if m != nil {
		return m.Result
	}
	return RegisterResult_registerSuccess
}

func (m *S2C_UserRegister) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *S2C_UserRegister) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *S2C_UserRegister) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 用户名密码登录服务器
type C2S_UserLogin struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *C2S_UserLogin) Reset()                    { *m = C2S_UserLogin{} }
func (m *C2S_UserLogin) String() string            { return proto.CompactTextString(m) }
func (*C2S_UserLogin) ProtoMessage()               {}
func (*C2S_UserLogin) Descriptor() ([]byte, []int) { return fileDescriptorPassport, []int{2} }

func (m *C2S_UserLogin) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *C2S_UserLogin) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// 登录服务器返回
type S2C_UserLogin struct {
	Result LoginResult `protobuf:"varint,1,opt,name=result,proto3,enum=protocol.LoginResult" json:"result,omitempty"`
	Uid    int64       `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Token  string      `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Msg    string      `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *S2C_UserLogin) Reset()                    { *m = S2C_UserLogin{} }
func (m *S2C_UserLogin) String() string            { return proto.CompactTextString(m) }
func (*S2C_UserLogin) ProtoMessage()               {}
func (*S2C_UserLogin) Descriptor() ([]byte, []int) { return fileDescriptorPassport, []int{3} }

func (m *S2C_UserLogin) GetResult() LoginResult {
	if m != nil {
		return m.Result
	}
	return LoginResult_loginSuccess
}

func (m *S2C_UserLogin) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *S2C_UserLogin) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *S2C_UserLogin) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 渠道登录
type C2S_ChannelLogin struct {
	Channel    string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	ChannelUID string `protobuf:"bytes,2,opt,name=channelUID,proto3" json:"channelUID,omitempty"`
	Sdk        string `protobuf:"bytes,3,opt,name=sdk,proto3" json:"sdk,omitempty"`
	Ip         string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (m *C2S_ChannelLogin) Reset()                    { *m = C2S_ChannelLogin{} }
func (m *C2S_ChannelLogin) String() string            { return proto.CompactTextString(m) }
func (*C2S_ChannelLogin) ProtoMessage()               {}
func (*C2S_ChannelLogin) Descriptor() ([]byte, []int) { return fileDescriptorPassport, []int{4} }

func (m *C2S_ChannelLogin) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *C2S_ChannelLogin) GetChannelUID() string {
	if m != nil {
		return m.ChannelUID
	}
	return ""
}

func (m *C2S_ChannelLogin) GetSdk() string {
	if m != nil {
		return m.Sdk
	}
	return ""
}

func (m *C2S_ChannelLogin) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// 渠道登录结果
type S2C_ChannelLogin struct {
	Uid   int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *S2C_ChannelLogin) Reset()                    { *m = S2C_ChannelLogin{} }
func (m *S2C_ChannelLogin) String() string            { return proto.CompactTextString(m) }
func (*S2C_ChannelLogin) ProtoMessage()               {}
func (*S2C_ChannelLogin) Descriptor() ([]byte, []int) { return fileDescriptorPassport, []int{5} }

func (m *S2C_ChannelLogin) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *S2C_ChannelLogin) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// token 登录
type C2S_TokenLogin struct {
	Uid   int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *C2S_TokenLogin) Reset()                    { *m = C2S_TokenLogin{} }
func (m *C2S_TokenLogin) String() string            { return proto.CompactTextString(m) }
func (*C2S_TokenLogin) ProtoMessage()               {}
func (*C2S_TokenLogin) Descriptor() ([]byte, []int) { return fileDescriptorPassport, []int{6} }

func (m *C2S_TokenLogin) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *C2S_TokenLogin) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type S2C_TokenLogin struct {
	Result LoginResult `protobuf:"varint,1,opt,name=result,proto3,enum=protocol.LoginResult" json:"result,omitempty"`
}

func (m *S2C_TokenLogin) Reset()                    { *m = S2C_TokenLogin{} }
func (m *S2C_TokenLogin) String() string            { return proto.CompactTextString(m) }
func (*S2C_TokenLogin) ProtoMessage()               {}
func (*S2C_TokenLogin) Descriptor() ([]byte, []int) { return fileDescriptorPassport, []int{7} }

func (m *S2C_TokenLogin) GetResult() LoginResult {
	if m != nil {
		return m.Result
	}
	return LoginResult_loginSuccess
}

func init() {
	proto.RegisterType((*C2S_UserRegister)(nil), "protocol.C2S_UserRegister")
	proto.RegisterType((*S2C_UserRegister)(nil), "protocol.S2C_UserRegister")
	proto.RegisterType((*C2S_UserLogin)(nil), "protocol.C2S_UserLogin")
	proto.RegisterType((*S2C_UserLogin)(nil), "protocol.S2C_UserLogin")
	proto.RegisterType((*C2S_ChannelLogin)(nil), "protocol.C2S_ChannelLogin")
	proto.RegisterType((*S2C_ChannelLogin)(nil), "protocol.S2C_ChannelLogin")
	proto.RegisterType((*C2S_TokenLogin)(nil), "protocol.C2S_TokenLogin")
	proto.RegisterType((*S2C_TokenLogin)(nil), "protocol.S2C_TokenLogin")
	proto.RegisterEnum("protocol.LoginResult", LoginResult_name, LoginResult_value)
	proto.RegisterEnum("protocol.RegisterResult", RegisterResult_name, RegisterResult_value)
}
func (m *C2S_UserRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_UserRegister) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if m.Server != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPassport(dAtA, i, uint64(m.Server))
	}
	return i, nil
}

func (m *S2C_UserRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_UserRegister) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPassport(dAtA, i, uint64(m.Result))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPassport(dAtA, i, uint64(m.Uid))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *C2S_UserLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_UserLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *S2C_UserLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_UserLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPassport(dAtA, i, uint64(m.Result))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPassport(dAtA, i, uint64(m.Uid))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *C2S_ChannelLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ChannelLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Channel)))
		i += copy(dAtA[i:], m.Channel)
	}
	if len(m.ChannelUID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.ChannelUID)))
		i += copy(dAtA[i:], m.ChannelUID)
	}
	if len(m.Sdk) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Sdk)))
		i += copy(dAtA[i:], m.Sdk)
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	return i, nil
}

func (m *S2C_ChannelLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ChannelLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPassport(dAtA, i, uint64(m.Uid))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *C2S_TokenLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_TokenLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPassport(dAtA, i, uint64(m.Uid))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *S2C_TokenLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_TokenLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPassport(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func encodeVarintPassport(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2S_UserRegister) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	if m.Server != 0 {
		n += 1 + sovPassport(uint64(m.Server))
	}
	return n
}

func (m *S2C_UserRegister) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovPassport(uint64(m.Result))
	}
	if m.Uid != 0 {
		n += 1 + sovPassport(uint64(m.Uid))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func (m *C2S_UserLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func (m *S2C_UserLogin) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovPassport(uint64(m.Result))
	}
	if m.Uid != 0 {
		n += 1 + sovPassport(uint64(m.Uid))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func (m *C2S_ChannelLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.ChannelUID)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Sdk)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func (m *S2C_ChannelLogin) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovPassport(uint64(m.Uid))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func (m *C2S_TokenLogin) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovPassport(uint64(m.Uid))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func (m *S2C_TokenLogin) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovPassport(uint64(m.Result))
	}
	return n
}

func sovPassport(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPassport(x uint64) (n int) {
	return sovPassport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2S_UserRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_UserRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_UserRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			m.Server = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Server |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_UserRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_UserRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_UserRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (RegisterResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_UserLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_UserLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_UserLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_UserLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_UserLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_UserLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (LoginResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ChannelLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ChannelLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ChannelLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sdk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sdk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ChannelLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ChannelLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ChannelLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_TokenLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_TokenLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_TokenLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_TokenLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_TokenLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_TokenLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (LoginResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPassport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPassport
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPassport
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPassport(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPassport = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPassport   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("passport.proto", fileDescriptorPassport) }

var fileDescriptorPassport = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0xcb, 0x8e, 0xd3, 0x30,
	0x14, 0x1d, 0x27, 0x33, 0x65, 0xe6, 0x0e, 0xf5, 0x18, 0xf3, 0x50, 0xc4, 0x22, 0x1a, 0x65, 0x35,
	0xaa, 0x44, 0x85, 0xca, 0x06, 0xb1, 0x41, 0xa2, 0x94, 0x87, 0xc4, 0x02, 0xa5, 0x74, 0x8d, 0xd2,
	0xc4, 0x14, 0xab, 0xa9, 0x1d, 0xd9, 0x49, 0xdb, 0x15, 0xdf, 0xc1, 0x27, 0xb1, 0xe4, 0x13, 0x50,
	0xf9, 0x11, 0xe4, 0x47, 0x68, 0x8a, 0xd8, 0x14, 0xb1, 0xca, 0x3d, 0xf7, 0x75, 0xce, 0xc9, 0x35,
	0xe0, 0x2a, 0xd3, 0xba, 0x92, 0xaa, 0x1e, 0x56, 0x4a, 0xd6, 0x92, 0x9e, 0xdb, 0x4f, 0x2e, 0xcb,
	0x64, 0x0e, 0x64, 0x3c, 0x9a, 0x7e, 0x9c, 0x69, 0xa6, 0x52, 0xb6, 0xe0, 0xba, 0x66, 0x8a, 0x3e,
	0x84, 0xf3, 0x46, 0x33, 0x25, 0xb2, 0x15, 0x8b, 0xd0, 0x35, 0xba, 0xb9, 0x48, 0x7f, 0x63, 0x53,
	0x33, 0xbb, 0x36, 0x52, 0x15, 0x51, 0xe0, 0x6a, 0x2d, 0xa6, 0x0f, 0xa0, 0xa7, 0x99, 0x5a, 0x33,
	0x15, 0x85, 0xd7, 0xe8, 0xe6, 0x2c, 0xf5, 0x28, 0xf9, 0x02, 0x64, 0x3a, 0x1a, 0x1f, 0x72, 0x3c,
	0x86, 0x9e, 0x62, 0xba, 0x29, 0x6b, 0xcb, 0x80, 0x47, 0xd1, 0xb0, 0x95, 0x34, 0x6c, 0x7b, 0x52,
	0x5b, 0x4f, 0x7d, 0x1f, 0x25, 0x10, 0x36, 0xdc, 0x91, 0x86, 0xa9, 0x09, 0xe9, 0x3d, 0x38, 0xab,
	0xe5, 0x92, 0x09, 0x4b, 0x77, 0x91, 0x3a, 0x60, 0xfa, 0x56, 0x7a, 0x11, 0x9d, 0xda, 0x9c, 0x09,
	0x93, 0xd7, 0xd0, 0x6f, 0x3d, 0xbe, 0x93, 0x0b, 0x2e, 0xfe, 0xd5, 0x60, 0xb2, 0x85, 0x7e, 0x6b,
	0xc4, 0x2d, 0x7a, 0xf4, 0x87, 0x8b, 0xfb, 0x7b, 0x17, 0xb6, 0xe1, 0xbf, 0x59, 0x10, 0xee, 0x4c,
	0xe3, 0xcf, 0x99, 0x10, 0xac, 0x74, 0xe4, 0x11, 0xdc, 0xca, 0x1d, 0xf6, 0x26, 0x5a, 0x48, 0x63,
	0x00, 0x1f, 0xce, 0xde, 0xbe, 0xf4, 0x2e, 0x3a, 0x19, 0xb3, 0x5f, 0x17, 0x4b, 0xcf, 0x69, 0x42,
	0x8a, 0x21, 0xe0, 0x95, 0x27, 0x0c, 0x78, 0x95, 0x3c, 0x73, 0x27, 0x3b, 0xe0, 0xf3, 0xea, 0xd1,
	0x5f, 0xd4, 0x07, 0x1d, 0xf5, 0xc9, 0x53, 0xc0, 0x46, 0xeb, 0x07, 0x03, 0x8e, 0x9b, 0x7c, 0x0e,
	0xd8, 0xb0, 0x76, 0x26, 0x8f, 0xfb, 0xc1, 0x83, 0x02, 0x2e, 0x3b, 0x69, 0x4a, 0xe0, 0x76, 0x69,
	0xe0, 0xb4, 0xc9, 0x73, 0xa6, 0x35, 0x39, 0xa1, 0x57, 0x70, 0xc9, 0xc5, 0x3a, 0x2b, 0x79, 0x61,
	0x8e, 0x48, 0x10, 0xc5, 0x00, 0x3e, 0xf1, 0x7e, 0x53, 0x90, 0x80, 0xde, 0x81, 0xfe, 0x27, 0xa9,
	0xe6, 0xbc, 0x28, 0x98, 0xb0, 0x2d, 0xa1, 0x99, 0xb1, 0xf2, 0x26, 0xdb, 0x8a, 0x2b, 0x46, 0x4e,
	0x07, 0x6f, 0x00, 0x1f, 0xbe, 0x51, 0x7a, 0x17, 0xae, 0x94, 0xcf, 0xec, 0xb9, 0x30, 0x80, 0x79,
	0x55, 0x93, 0x2d, 0xd7, 0xb5, 0x26, 0xc8, 0xac, 0xf6, 0x54, 0xaf, 0xa4, 0x5a, 0x65, 0x35, 0x09,
	0x5e, 0x90, 0x6f, 0xbb, 0x18, 0x7d, 0xdf, 0xc5, 0xe8, 0xc7, 0x2e, 0x46, 0x5f, 0x7f, 0xc6, 0x27,
	0xf3, 0x9e, 0xf5, 0xf7, 0xe4, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb8, 0xb0, 0x41, 0x8b, 0xb2,
	0x03, 0x00, 0x00,
}
