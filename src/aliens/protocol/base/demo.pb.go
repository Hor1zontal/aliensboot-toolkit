// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: demo.proto

package base

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import time "time"

import binary "encoding/binary"
import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

type AddLog struct {
	OrderRecord *OrderRecord `protobuf:"bytes,1,opt,name=orderRecord" json:"orderRecord,omitempty"`
}

func (m *AddLog) Reset()                    { *m = AddLog{} }
func (m *AddLog) String() string            { return proto.CompactTextString(m) }
func (*AddLog) ProtoMessage()               {}
func (*AddLog) Descriptor() ([]byte, []int) { return fileDescriptorDemo, []int{0} }

func (m *AddLog) GetOrderRecord() *OrderRecord {
	if m != nil {
		return m.OrderRecord
	}
	return nil
}

type OrderRecord struct {
	Id        string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	UserID    int32   `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty" bson:"userid"`
	ProductID int32   `protobuf:"varint,3,opt,name=productID,proto3" json:"productID,omitempty" bson:"productid"`
	Amount    float64 `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty" bson:"amount"`
	//  double time = 5 [(gogoproto.moretags) = "bson:\"time\""];
	Time time.Time `protobuf:"bytes,5,opt,name=time,stdtime" json:"time" bson:"time"`
}

func (m *OrderRecord) Reset()                    { *m = OrderRecord{} }
func (m *OrderRecord) String() string            { return proto.CompactTextString(m) }
func (*OrderRecord) ProtoMessage()               {}
func (*OrderRecord) Descriptor() ([]byte, []int) { return fileDescriptorDemo, []int{1} }

func (m *OrderRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OrderRecord) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *OrderRecord) GetProductID() int32 {
	if m != nil {
		return m.ProductID
	}
	return 0
}

func (m *OrderRecord) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OrderRecord) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*AddLog)(nil), "base.add_log")
	proto.RegisterType((*OrderRecord)(nil), "base.order_record")
}
func (m *AddLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderRecord != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDemo(dAtA, i, uint64(m.OrderRecord.Size()))
		n1, err := m.OrderRecord.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *OrderRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDemo(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.UserID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDemo(dAtA, i, uint64(m.UserID))
	}
	if m.ProductID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDemo(dAtA, i, uint64(m.ProductID))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Amount))))
		i += 8
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintDemo(dAtA, i, uint64(types.SizeOfStdTime(m.Time)))
	n2, err := types.StdTimeMarshalTo(m.Time, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func encodeVarintDemo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AddLog) Size() (n int) {
	var l int
	_ = l
	if m.OrderRecord != nil {
		l = m.OrderRecord.Size()
		n += 1 + l + sovDemo(uint64(l))
	}
	return n
}

func (m *OrderRecord) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDemo(uint64(l))
	}
	if m.UserID != 0 {
		n += 1 + sovDemo(uint64(m.UserID))
	}
	if m.ProductID != 0 {
		n += 1 + sovDemo(uint64(m.ProductID))
	}
	if m.Amount != 0 {
		n += 9
	}
	l = types.SizeOfStdTime(m.Time)
	n += 1 + l + sovDemo(uint64(l))
	return n
}

func sovDemo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDemo(x uint64) (n int) {
	return sovDemo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: add_log: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: add_log: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrderRecord == nil {
				m.OrderRecord = &OrderRecord{}
			}
			if err := m.OrderRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDemo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: order_record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: order_record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductID", wireType)
			}
			m.ProductID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Amount = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDemo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDemo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDemo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDemo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDemo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDemo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDemo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDemo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDemo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDemo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDemo   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("demo.proto", fileDescriptorDemo) }

var fileDescriptorDemo = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x41, 0x4e, 0x02, 0x31,
	0x14, 0x86, 0xe9, 0x08, 0x18, 0x8a, 0x1a, 0x6c, 0x4c, 0x9c, 0xb0, 0x98, 0x92, 0xae, 0x70, 0x61,
	0x49, 0xd0, 0x95, 0x1b, 0x93, 0x09, 0x89, 0x61, 0x3b, 0x71, 0x4f, 0x66, 0x68, 0xad, 0x93, 0x30,
	0x3c, 0xd2, 0xe9, 0x1c, 0xc0, 0x1b, 0xb8, 0xf4, 0x48, 0x2c, 0x3d, 0xc1, 0x68, 0xf0, 0x06, 0x73,
	0x02, 0xd3, 0x16, 0x02, 0xbb, 0xbe, 0xf7, 0x7f, 0xff, 0xdf, 0xbc, 0x1f, 0x63, 0x21, 0x0b, 0xe0,
	0x1b, 0x0d, 0x06, 0x48, 0x3b, 0x4b, 0x4b, 0x39, 0xbc, 0x57, 0xb9, 0x79, 0xaf, 0x32, 0xbe, 0x84,
	0x62, 0xa2, 0x40, 0xc1, 0xc4, 0x89, 0x59, 0xf5, 0xe6, 0x26, 0x37, 0xb8, 0x97, 0x37, 0x0d, 0xa9,
	0x02, 0x50, 0x2b, 0x79, 0xa4, 0x4c, 0x5e, 0xc8, 0xd2, 0xa4, 0xc5, 0xc6, 0x03, 0xec, 0x19, 0x9f,
	0xa7, 0x42, 0x2c, 0x56, 0xa0, 0xc8, 0x23, 0xee, 0x83, 0x16, 0x52, 0x27, 0x72, 0x09, 0x5a, 0x84,
	0x68, 0x84, 0xc6, 0xfd, 0x29, 0xe1, 0xf6, 0x5b, 0xee, 0x84, 0x85, 0x76, 0x4a, 0x72, 0x8a, 0xb1,
	0x8f, 0x00, 0x5f, 0x9c, 0xaa, 0x24, 0xc2, 0x41, 0xee, 0xdd, 0xbd, 0xf8, 0xaa, 0xa9, 0x29, 0xce,
	0x4a, 0x58, 0x3f, 0xb1, 0x45, 0x2e, 0x58, 0x12, 0xe4, 0x82, 0xdc, 0xe1, 0x6e, 0x55, 0x4a, 0x3d,
	0x9f, 0x85, 0xc1, 0x08, 0x8d, 0x3b, 0xf1, 0x75, 0x53, 0xd3, 0x4b, 0xcf, 0xd8, 0xbd, 0xc5, 0xf6,
	0x00, 0x99, 0xe2, 0xde, 0x46, 0x83, 0xa8, 0x96, 0x66, 0x3e, 0x0b, 0xcf, 0x1c, 0x7d, 0xd3, 0xd4,
	0x74, 0xe0, 0xe9, 0xbd, 0x64, 0x0d, 0x47, 0xcc, 0xc6, 0xa7, 0x05, 0x54, 0x6b, 0x13, 0xb6, 0x47,
	0x68, 0x8c, 0x4e, 0xe3, 0xfd, 0x9e, 0x25, 0x7b, 0x80, 0xbc, 0xe0, 0xb6, 0xad, 0x23, 0xec, 0xb8,
	0x4b, 0x87, 0xdc, 0x77, 0xc5, 0x0f, 0x5d, 0xf1, 0xd7, 0x43, 0x57, 0xf1, 0xed, 0xb6, 0xa6, 0xad,
	0xa6, 0xa6, 0x7d, 0x1f, 0x64, 0x5d, 0xec, 0xf3, 0x87, 0xa2, 0xc4, 0x05, 0xc4, 0x83, 0xed, 0x2e,
	0x42, 0xdf, 0xbb, 0x08, 0xfd, 0xee, 0x22, 0xf4, 0xf5, 0x17, 0xb5, 0xb2, 0xae, 0x0b, 0x79, 0xf8,
	0x0f, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x9e, 0x0f, 0xb1, 0xc1, 0x01, 0x00, 0x00,
}
