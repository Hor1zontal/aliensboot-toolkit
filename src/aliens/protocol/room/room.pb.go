// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: room.proto

/*
	Package room is a generated protocol buffer package.

	It is generated from these files:
		room.proto

	It has these top-level messages:
		Request
		Response
		CreateRoom
		CreateRoomRet
		JoinRoom
		JoinRoomRet
		LeaveRoom
		LeaveRoomRet
*/
package room

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RoomResult int32

const (
	RoomResult_success      RoomResult = 0
	RoomResult_invalidToken RoomResult = 1
	RoomResult_maxPlayers   RoomResult = 2
)

var RoomResult_name = map[int32]string{
	0: "success",
	1: "invalidToken",
	2: "maxPlayers",
}
var RoomResult_value = map[string]int32{
	"success":      0,
	"invalidToken": 1,
	"maxPlayers":   2,
}

func (x RoomResult) String() string {
	return proto.EnumName(RoomResult_name, int32(x))
}
func (RoomResult) EnumDescriptor() ([]byte, []int) { return fileDescriptorRoom, []int{0} }

// request
type Request struct {
	Session int32 `protobuf:"varint,1,opt,name=session,proto3" json:"session,omitempty"`
	// -----------------房间模块接口---------------
	//
	// Types that are valid to be assigned to Request:
	//	*Request_CreateRoom
	//	*Request_JoinRoom
	//	*Request_LeaveRoom
	Request isRequest_Request `protobuf_oneof:"request"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{0} }

type isRequest_Request interface {
	isRequest_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Request_CreateRoom struct {
	CreateRoom *CreateRoom `protobuf:"bytes,4,opt,name=createRoom,oneof"`
}
type Request_JoinRoom struct {
	JoinRoom *JoinRoom `protobuf:"bytes,5,opt,name=joinRoom,oneof"`
}
type Request_LeaveRoom struct {
	LeaveRoom *LeaveRoom `protobuf:"bytes,6,opt,name=leaveRoom,oneof"`
}

func (*Request_CreateRoom) isRequest_Request() {}
func (*Request_JoinRoom) isRequest_Request()   {}
func (*Request_LeaveRoom) isRequest_Request()  {}

func (m *Request) GetRequest() isRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Request) GetSession() int32 {
	if m != nil {
		return m.Session
	}
	return 0
}

func (m *Request) GetCreateRoom() *CreateRoom {
	if x, ok := m.GetRequest().(*Request_CreateRoom); ok {
		return x.CreateRoom
	}
	return nil
}

func (m *Request) GetJoinRoom() *JoinRoom {
	if x, ok := m.GetRequest().(*Request_JoinRoom); ok {
		return x.JoinRoom
	}
	return nil
}

func (m *Request) GetLeaveRoom() *LeaveRoom {
	if x, ok := m.GetRequest().(*Request_LeaveRoom); ok {
		return x.LeaveRoom
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Request) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Request_OneofMarshaler, _Request_OneofUnmarshaler, _Request_OneofSizer, []interface{}{
		(*Request_CreateRoom)(nil),
		(*Request_JoinRoom)(nil),
		(*Request_LeaveRoom)(nil),
	}
}

func _Request_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Request)
	// request
	switch x := m.Request.(type) {
	case *Request_CreateRoom:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateRoom); err != nil {
			return err
		}
	case *Request_JoinRoom:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinRoom); err != nil {
			return err
		}
	case *Request_LeaveRoom:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LeaveRoom); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Request.Request has unexpected type %T", x)
	}
	return nil
}

func _Request_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Request)
	switch tag {
	case 4: // request.createRoom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateRoom)
		err := b.DecodeMessage(msg)
		m.Request = &Request_CreateRoom{msg}
		return true, err
	case 5: // request.joinRoom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JoinRoom)
		err := b.DecodeMessage(msg)
		m.Request = &Request_JoinRoom{msg}
		return true, err
	case 6: // request.leaveRoom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LeaveRoom)
		err := b.DecodeMessage(msg)
		m.Request = &Request_LeaveRoom{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Request_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Request)
	// request
	switch x := m.Request.(type) {
	case *Request_CreateRoom:
		s := proto.Size(x.CreateRoom)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_JoinRoom:
		s := proto.Size(x.JoinRoom)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_LeaveRoom:
		s := proto.Size(x.LeaveRoom)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// response
type Response struct {
	Session int32 `protobuf:"varint,1,opt,name=session,proto3" json:"session,omitempty"`
	// -----------------房间模块接口---------------
	//
	// Types that are valid to be assigned to Response:
	//	*Response_Exception
	//	*Response_CreateRoomRet
	//	*Response_JoinRoomRet
	//	*Response_LeaveRoomRet
	Response isResponse_Response `protobuf_oneof:"response"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{1} }

type isResponse_Response interface {
	isResponse_Response()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Response_Exception struct {
	Exception uint32 `protobuf:"varint,3,opt,name=exception,proto3,oneof"`
}
type Response_CreateRoomRet struct {
	CreateRoomRet *CreateRoomRet `protobuf:"bytes,4,opt,name=createRoomRet,oneof"`
}
type Response_JoinRoomRet struct {
	JoinRoomRet *JoinRoomRet `protobuf:"bytes,5,opt,name=joinRoomRet,oneof"`
}
type Response_LeaveRoomRet struct {
	LeaveRoomRet *LeaveRoomRet `protobuf:"bytes,6,opt,name=leaveRoomRet,oneof"`
}

func (*Response_Exception) isResponse_Response()     {}
func (*Response_CreateRoomRet) isResponse_Response() {}
func (*Response_JoinRoomRet) isResponse_Response()   {}
func (*Response_LeaveRoomRet) isResponse_Response()  {}

func (m *Response) GetResponse() isResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *Response) GetSession() int32 {
	if m != nil {
		return m.Session
	}
	return 0
}

func (m *Response) GetException() uint32 {
	if x, ok := m.GetResponse().(*Response_Exception); ok {
		return x.Exception
	}
	return 0
}

func (m *Response) GetCreateRoomRet() *CreateRoomRet {
	if x, ok := m.GetResponse().(*Response_CreateRoomRet); ok {
		return x.CreateRoomRet
	}
	return nil
}

func (m *Response) GetJoinRoomRet() *JoinRoomRet {
	if x, ok := m.GetResponse().(*Response_JoinRoomRet); ok {
		return x.JoinRoomRet
	}
	return nil
}

func (m *Response) GetLeaveRoomRet() *LeaveRoomRet {
	if x, ok := m.GetResponse().(*Response_LeaveRoomRet); ok {
		return x.LeaveRoomRet
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Response) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Response_OneofMarshaler, _Response_OneofUnmarshaler, _Response_OneofSizer, []interface{}{
		(*Response_Exception)(nil),
		(*Response_CreateRoomRet)(nil),
		(*Response_JoinRoomRet)(nil),
		(*Response_LeaveRoomRet)(nil),
	}
}

func _Response_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Response)
	// response
	switch x := m.Response.(type) {
	case *Response_Exception:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Exception))
	case *Response_CreateRoomRet:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateRoomRet); err != nil {
			return err
		}
	case *Response_JoinRoomRet:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinRoomRet); err != nil {
			return err
		}
	case *Response_LeaveRoomRet:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LeaveRoomRet); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Response.Response has unexpected type %T", x)
	}
	return nil
}

func _Response_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Response)
	switch tag {
	case 3: // response.exception
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Response = &Response_Exception{uint32(x)}
		return true, err
	case 4: // response.createRoomRet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateRoomRet)
		err := b.DecodeMessage(msg)
		m.Response = &Response_CreateRoomRet{msg}
		return true, err
	case 5: // response.joinRoomRet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JoinRoomRet)
		err := b.DecodeMessage(msg)
		m.Response = &Response_JoinRoomRet{msg}
		return true, err
	case 6: // response.leaveRoomRet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LeaveRoomRet)
		err := b.DecodeMessage(msg)
		m.Response = &Response_LeaveRoomRet{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Response_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Response)
	// response
	switch x := m.Response.(type) {
	case *Response_Exception:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Exception))
	case *Response_CreateRoomRet:
		s := proto.Size(x.CreateRoomRet)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_JoinRoomRet:
		s := proto.Size(x.JoinRoomRet)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_LeaveRoomRet:
		s := proto.Size(x.LeaveRoomRet)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// 创建房间
type CreateRoom struct {
	MaxPlayer uint32 `protobuf:"varint,1,opt,name=maxPlayer,proto3" json:"maxPlayer,omitempty"`
}

func (m *CreateRoom) Reset()                    { *m = CreateRoom{} }
func (m *CreateRoom) String() string            { return proto.CompactTextString(m) }
func (*CreateRoom) ProtoMessage()               {}
func (*CreateRoom) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{2} }

func (m *CreateRoom) GetMaxPlayer() uint32 {
	if m != nil {
		return m.MaxPlayer
	}
	return 0
}

type CreateRoomRet struct {
	Result RoomResult `protobuf:"varint,1,opt,name=result,proto3,enum=room.RoomResult" json:"result,omitempty"`
	RoomID string     `protobuf:"bytes,2,opt,name=roomID,proto3" json:"roomID,omitempty"`
}

func (m *CreateRoomRet) Reset()                    { *m = CreateRoomRet{} }
func (m *CreateRoomRet) String() string            { return proto.CompactTextString(m) }
func (*CreateRoomRet) ProtoMessage()               {}
func (*CreateRoomRet) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{3} }

func (m *CreateRoomRet) GetResult() RoomResult {
	if m != nil {
		return m.Result
	}
	return RoomResult_success
}

func (m *CreateRoomRet) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

// 加入房间
type JoinRoom struct {
	RoomID string `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *JoinRoom) Reset()                    { *m = JoinRoom{} }
func (m *JoinRoom) String() string            { return proto.CompactTextString(m) }
func (*JoinRoom) ProtoMessage()               {}
func (*JoinRoom) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{4} }

func (m *JoinRoom) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *JoinRoom) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type JoinRoomRet struct {
	Result RoomResult `protobuf:"varint,1,opt,name=result,proto3,enum=room.RoomResult" json:"result,omitempty"`
	SeatID uint32     `protobuf:"varint,2,opt,name=seatID,proto3" json:"seatID,omitempty"`
}

func (m *JoinRoomRet) Reset()                    { *m = JoinRoomRet{} }
func (m *JoinRoomRet) String() string            { return proto.CompactTextString(m) }
func (*JoinRoomRet) ProtoMessage()               {}
func (*JoinRoomRet) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{5} }

func (m *JoinRoomRet) GetResult() RoomResult {
	if m != nil {
		return m.Result
	}
	return RoomResult_success
}

func (m *JoinRoomRet) GetSeatID() uint32 {
	if m != nil {
		return m.SeatID
	}
	return 0
}

// 离开房间
type LeaveRoom struct {
	RoomID string `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *LeaveRoom) Reset()                    { *m = LeaveRoom{} }
func (m *LeaveRoom) String() string            { return proto.CompactTextString(m) }
func (*LeaveRoom) ProtoMessage()               {}
func (*LeaveRoom) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{6} }

func (m *LeaveRoom) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *LeaveRoom) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type LeaveRoomRet struct {
	Result RoomResult `protobuf:"varint,1,opt,name=result,proto3,enum=room.RoomResult" json:"result,omitempty"`
}

func (m *LeaveRoomRet) Reset()                    { *m = LeaveRoomRet{} }
func (m *LeaveRoomRet) String() string            { return proto.CompactTextString(m) }
func (*LeaveRoomRet) ProtoMessage()               {}
func (*LeaveRoomRet) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{7} }

func (m *LeaveRoomRet) GetResult() RoomResult {
	if m != nil {
		return m.Result
	}
	return RoomResult_success
}

func init() {
	proto.RegisterType((*Request)(nil), "room.Request")
	proto.RegisterType((*Response)(nil), "room.Response")
	proto.RegisterType((*CreateRoom)(nil), "room.create_room")
	proto.RegisterType((*CreateRoomRet)(nil), "room.create_room_ret")
	proto.RegisterType((*JoinRoom)(nil), "room.join_room")
	proto.RegisterType((*JoinRoomRet)(nil), "room.join_room_ret")
	proto.RegisterType((*LeaveRoom)(nil), "room.leave_room")
	proto.RegisterType((*LeaveRoomRet)(nil), "room.leave_room_ret")
	proto.RegisterEnum("room.RoomResult", RoomResult_name, RoomResult_value)
}
func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Session != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Session))
	}
	if m.Request != nil {
		nn1, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Request_CreateRoom) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateRoom != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.CreateRoom.Size()))
		n2, err := m.CreateRoom.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Request_JoinRoom) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JoinRoom != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.JoinRoom.Size()))
		n3, err := m.JoinRoom.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Request_LeaveRoom) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LeaveRoom != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.LeaveRoom.Size()))
		n4, err := m.LeaveRoom.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Session != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Session))
	}
	if m.Response != nil {
		nn5, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	return i, nil
}

func (m *Response_Exception) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintRoom(dAtA, i, uint64(m.Exception))
	return i, nil
}
func (m *Response_CreateRoomRet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateRoomRet != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.CreateRoomRet.Size()))
		n6, err := m.CreateRoomRet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Response_JoinRoomRet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JoinRoomRet != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.JoinRoomRet.Size()))
		n7, err := m.JoinRoomRet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Response_LeaveRoomRet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LeaveRoomRet != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.LeaveRoomRet.Size()))
		n8, err := m.LeaveRoomRet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *CreateRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxPlayer != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.MaxPlayer))
	}
	return i, nil
}

func (m *CreateRoomRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRoomRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Result))
	}
	if len(m.RoomID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.RoomID)))
		i += copy(dAtA[i:], m.RoomID)
	}
	return i, nil
}

func (m *JoinRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoomID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.RoomID)))
		i += copy(dAtA[i:], m.RoomID)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *JoinRoomRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinRoomRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Result))
	}
	if m.SeatID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.SeatID))
	}
	return i, nil
}

func (m *LeaveRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoomID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.RoomID)))
		i += copy(dAtA[i:], m.RoomID)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *LeaveRoomRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveRoomRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func encodeVarintRoom(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Request) Size() (n int) {
	var l int
	_ = l
	if m.Session != 0 {
		n += 1 + sovRoom(uint64(m.Session))
	}
	if m.Request != nil {
		n += m.Request.Size()
	}
	return n
}

func (m *Request_CreateRoom) Size() (n int) {
	var l int
	_ = l
	if m.CreateRoom != nil {
		l = m.CreateRoom.Size()
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}
func (m *Request_JoinRoom) Size() (n int) {
	var l int
	_ = l
	if m.JoinRoom != nil {
		l = m.JoinRoom.Size()
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}
func (m *Request_LeaveRoom) Size() (n int) {
	var l int
	_ = l
	if m.LeaveRoom != nil {
		l = m.LeaveRoom.Size()
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}
func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.Session != 0 {
		n += 1 + sovRoom(uint64(m.Session))
	}
	if m.Response != nil {
		n += m.Response.Size()
	}
	return n
}

func (m *Response_Exception) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovRoom(uint64(m.Exception))
	return n
}
func (m *Response_CreateRoomRet) Size() (n int) {
	var l int
	_ = l
	if m.CreateRoomRet != nil {
		l = m.CreateRoomRet.Size()
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}
func (m *Response_JoinRoomRet) Size() (n int) {
	var l int
	_ = l
	if m.JoinRoomRet != nil {
		l = m.JoinRoomRet.Size()
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}
func (m *Response_LeaveRoomRet) Size() (n int) {
	var l int
	_ = l
	if m.LeaveRoomRet != nil {
		l = m.LeaveRoomRet.Size()
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}
func (m *CreateRoom) Size() (n int) {
	var l int
	_ = l
	if m.MaxPlayer != 0 {
		n += 1 + sovRoom(uint64(m.MaxPlayer))
	}
	return n
}

func (m *CreateRoomRet) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovRoom(uint64(m.Result))
	}
	l = len(m.RoomID)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}

func (m *JoinRoom) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomID)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}

func (m *JoinRoomRet) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovRoom(uint64(m.Result))
	}
	if m.SeatID != 0 {
		n += 1 + sovRoom(uint64(m.SeatID))
	}
	return n
}

func (m *LeaveRoom) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomID)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}

func (m *LeaveRoomRet) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovRoom(uint64(m.Result))
	}
	return n
}

func sovRoom(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRoom(x uint64) (n int) {
	return sovRoom(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			m.Session = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Session |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateRoom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateRoom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_CreateRoom{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinRoom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinRoom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_JoinRoom{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaveRoom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LeaveRoom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_LeaveRoom{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			m.Session = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Session |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exception", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Response = &Response_Exception{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateRoomRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateRoomRet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_CreateRoomRet{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinRoomRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinRoomRet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_JoinRoomRet{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaveRoomRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LeaveRoomRet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_LeaveRoomRet{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: create_room: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: create_room: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPlayer", wireType)
			}
			m.MaxPlayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPlayer |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRoomRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: create_room_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: create_room_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (RoomResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: join_room: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: join_room: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinRoomRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: join_room_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: join_room_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (RoomResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeatID", wireType)
			}
			m.SeatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeatID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: leave_room: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: leave_room: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveRoomRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: leave_room_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: leave_room_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (RoomResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoom(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRoom
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRoom
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRoom(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRoom = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoom   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("room.proto", fileDescriptorRoom) }

var fileDescriptorRoom = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xbd, 0x8e, 0xd3, 0x40,
	0x14, 0x85, 0x33, 0x61, 0xf3, 0xe3, 0xe3, 0x75, 0xd6, 0x0c, 0x0b, 0x4a, 0x81, 0xac, 0xc8, 0x55,
	0x00, 0xb1, 0x42, 0x6c, 0x81, 0x58, 0xa0, 0x89, 0x28, 0x96, 0x0e, 0x8d, 0xb6, 0x5f, 0x99, 0x70,
	0x8b, 0x40, 0xe2, 0x09, 0x33, 0x93, 0xd5, 0xd2, 0xf3, 0x10, 0x3c, 0x10, 0x05, 0x25, 0x8f, 0x80,
	0xc2, 0x8b, 0xa0, 0xf9, 0xb1, 0x63, 0x07, 0x09, 0x29, 0x9d, 0xef, 0xb9, 0xe7, 0xcc, 0xdc, 0xef,
	0x8e, 0x0c, 0x28, 0x29, 0x57, 0x67, 0x6b, 0x25, 0x8d, 0xe4, 0x47, 0xf6, 0x3b, 0xff, 0xc1, 0x30,
	0x10, 0xf4, 0x65, 0x43, 0xda, 0xf0, 0x31, 0x06, 0x9a, 0xb4, 0x5e, 0xc8, 0x72, 0xcc, 0x26, 0x6c,
	0xda, 0x13, 0x55, 0xc9, 0xcf, 0x81, 0xb9, 0xa2, 0xc2, 0x90, 0x90, 0x72, 0x35, 0x3e, 0x9a, 0xb0,
	0x69, 0xfc, 0xfc, 0xee, 0x99, 0x3b, 0xcc, 0xeb, 0xd7, 0xf6, 0xfb, 0xb2, 0x23, 0x1a, 0x36, 0xfe,
	0x14, 0xc3, 0x4f, 0x72, 0x51, 0xba, 0x48, 0xcf, 0x45, 0x4e, 0x7c, 0xc4, 0xaa, 0x55, 0xa0, 0xb6,
	0xf0, 0x67, 0x88, 0x96, 0x54, 0xdc, 0xf8, 0x2b, 0xfa, 0xce, 0x9f, 0x7a, 0xbf, 0x93, 0xab, 0xc0,
	0xce, 0x34, 0x8b, 0x30, 0x50, 0x7e, 0xf4, 0xfc, 0x5b, 0x17, 0x43, 0x41, 0x7a, 0x2d, 0x4b, 0x4d,
	0xff, 0xe1, 0xc8, 0x10, 0xd1, 0xed, 0x9c, 0xd6, 0xc6, 0xf6, 0xee, 0x4c, 0xd8, 0x34, 0xb1, 0x27,
	0xd6, 0x12, 0x7f, 0x83, 0x64, 0x07, 0x20, 0xc8, 0x04, 0xd4, 0xfb, 0xff, 0xa0, 0x5e, 0x2b, 0x32,
	0x97, 0x1d, 0xd1, 0x76, 0xf3, 0x17, 0x88, 0x2b, 0x1c, 0x1b, 0xf6, 0xd0, 0xf7, 0xf6, 0xa0, 0x43,
	0xb4, 0xe9, 0xe4, 0x17, 0x38, 0xae, 0xb1, 0x6c, 0xd2, 0xe3, 0x9f, 0xee, 0xe3, 0x87, 0x68, 0xcb,
	0x3b, 0x03, 0x86, 0x2a, 0x90, 0xe7, 0x4f, 0x10, 0x37, 0x86, 0xe4, 0x0f, 0x11, 0xad, 0x8a, 0xdb,
	0xf7, 0xcb, 0xe2, 0x2b, 0x29, 0xb7, 0x8a, 0x44, 0xec, 0x84, 0xfc, 0x0a, 0x27, 0x7b, 0x44, 0xfc,
	0x11, 0xfa, 0x8a, 0xf4, 0x66, 0x69, 0x9c, 0x7b, 0x54, 0xbd, 0x71, 0xe8, 0xdb, 0x86, 0x08, 0x06,
	0xfe, 0x00, 0x7d, 0x2b, 0xbf, 0x7b, 0x3b, 0xee, 0x4e, 0xd8, 0x34, 0x12, 0xa1, 0xca, 0x5f, 0x22,
	0xaa, 0x51, 0x1b, 0x26, 0xd6, 0x34, 0xf1, 0x53, 0xf4, 0x8c, 0xfc, 0x4c, 0x65, 0xc8, 0xfa, 0x22,
	0x17, 0x48, 0x5a, 0x5b, 0x3a, 0x70, 0x1c, 0x4d, 0x85, 0x09, 0xe3, 0x24, 0x22, 0x54, 0xf9, 0x05,
	0xb0, 0xdb, 0xdf, 0x81, 0xf3, 0xbc, 0xc2, 0xa8, 0xbd, 0xfb, 0x03, 0x06, 0x7a, 0xfc, 0x1a, 0x71,
	0x43, 0xe6, 0x31, 0x06, 0x7a, 0x33, 0x9f, 0x93, 0xd6, 0x69, 0x87, 0xa7, 0x38, 0x5e, 0x94, 0x37,
	0xc5, 0x72, 0xf1, 0xf1, 0xca, 0x5e, 0x94, 0x32, 0x3e, 0x02, 0xea, 0x87, 0xd1, 0x69, 0x77, 0x96,
	0xfe, 0xdc, 0x66, 0xec, 0xd7, 0x36, 0x63, 0xbf, 0xb7, 0x19, 0xfb, 0xfe, 0x27, 0xeb, 0x7c, 0xe8,
	0xbb, 0xbf, 0xf6, 0xfc, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5f, 0x79, 0x2d, 0x9b, 0xc3, 0x03,
	0x00, 0x00,
}
