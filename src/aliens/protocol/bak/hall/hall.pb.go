// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hall.proto

/*
	Package hall is a generated protocol buffer package.

	It is generated from these files:
		hall.proto

	It has these top-level messages:
		HallRequest
		HallResponse
		QuickMatch
		QuickMatchRet
		CancelMatch
		CancelMatchRet
		QuickMatchResult
*/
package hall

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HallResult int32

const (
	HallResult_success HallResult = 0
)

var HallResult_name = map[int32]string{
	0: "success",
}
var HallResult_value = map[string]int32{
	"success": 0,
}

func (x HallResult) String() string {
	return proto.EnumName(HallResult_name, int32(x))
}
func (HallResult) EnumDescriptor() ([]byte, []int) { return fileDescriptorHall, []int{0} }

// request
type HallRequest struct {
	Session int32 `protobuf:"varint,1,opt,name=session,proto3" json:"session,omitempty"`
	// -----------------大厅模块接口---------------
	//
	// Types that are valid to be assigned to Request:
	//	*HallRequest_QuickMatch
	Request isHallRequest_Request `protobuf_oneof:"request"`
}

func (m *HallRequest) Reset()                    { *m = HallRequest{} }
func (m *HallRequest) String() string            { return proto.CompactTextString(m) }
func (*HallRequest) ProtoMessage()               {}
func (*HallRequest) Descriptor() ([]byte, []int) { return fileDescriptorHall, []int{0} }

type isHallRequest_Request interface {
	isHallRequest_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type HallRequest_QuickMatch struct {
	QuickMatch *QuickMatch `protobuf:"bytes,5,opt,name=quickMatch,oneof"`
}

func (*HallRequest_QuickMatch) isHallRequest_Request() {}

func (m *HallRequest) GetRequest() isHallRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *HallRequest) GetSession() int32 {
	if m != nil {
		return m.Session
	}
	return 0
}

func (m *HallRequest) GetQuickMatch() *QuickMatch {
	if x, ok := m.GetRequest().(*HallRequest_QuickMatch); ok {
		return x.QuickMatch
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HallRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HallRequest_OneofMarshaler, _HallRequest_OneofUnmarshaler, _HallRequest_OneofSizer, []interface{}{
		(*HallRequest_QuickMatch)(nil),
	}
}

func _HallRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HallRequest)
	// request
	switch x := m.Request.(type) {
	case *HallRequest_QuickMatch:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QuickMatch); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HallRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _HallRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HallRequest)
	switch tag {
	case 5: // request.quickMatch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QuickMatch)
		err := b.DecodeMessage(msg)
		m.Request = &HallRequest_QuickMatch{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HallRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HallRequest)
	// request
	switch x := m.Request.(type) {
	case *HallRequest_QuickMatch:
		s := proto.Size(x.QuickMatch)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// response
type HallResponse struct {
	Session int32 `protobuf:"varint,1,opt,name=session,proto3" json:"session,omitempty"`
	// -----------------大厅模块接口---------------
	//
	// Types that are valid to be assigned to Response:
	//	*HallResponse_Exception
	//	*HallResponse_QuickMatchRet
	Response isHallResponse_Response `protobuf_oneof:"response"`
}

func (m *HallResponse) Reset()                    { *m = HallResponse{} }
func (m *HallResponse) String() string            { return proto.CompactTextString(m) }
func (*HallResponse) ProtoMessage()               {}
func (*HallResponse) Descriptor() ([]byte, []int) { return fileDescriptorHall, []int{1} }

type isHallResponse_Response interface {
	isHallResponse_Response()
	MarshalTo([]byte) (int, error)
	Size() int
}

type HallResponse_Exception struct {
	Exception uint32 `protobuf:"varint,3,opt,name=exception,proto3,oneof"`
}
type HallResponse_QuickMatchRet struct {
	QuickMatchRet *QuickMatchRet `protobuf:"bytes,5,opt,name=quickMatchRet,oneof"`
}

func (*HallResponse_Exception) isHallResponse_Response()     {}
func (*HallResponse_QuickMatchRet) isHallResponse_Response() {}

func (m *HallResponse) GetResponse() isHallResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *HallResponse) GetSession() int32 {
	if m != nil {
		return m.Session
	}
	return 0
}

func (m *HallResponse) GetException() uint32 {
	if x, ok := m.GetResponse().(*HallResponse_Exception); ok {
		return x.Exception
	}
	return 0
}

func (m *HallResponse) GetQuickMatchRet() *QuickMatchRet {
	if x, ok := m.GetResponse().(*HallResponse_QuickMatchRet); ok {
		return x.QuickMatchRet
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HallResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HallResponse_OneofMarshaler, _HallResponse_OneofUnmarshaler, _HallResponse_OneofSizer, []interface{}{
		(*HallResponse_Exception)(nil),
		(*HallResponse_QuickMatchRet)(nil),
	}
}

func _HallResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HallResponse)
	// response
	switch x := m.Response.(type) {
	case *HallResponse_Exception:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Exception))
	case *HallResponse_QuickMatchRet:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QuickMatchRet); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HallResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _HallResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HallResponse)
	switch tag {
	case 3: // response.exception
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Response = &HallResponse_Exception{uint32(x)}
		return true, err
	case 5: // response.quickMatchRet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QuickMatchRet)
		err := b.DecodeMessage(msg)
		m.Response = &HallResponse_QuickMatchRet{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HallResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HallResponse)
	// response
	switch x := m.Response.(type) {
	case *HallResponse_Exception:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Exception))
	case *HallResponse_QuickMatchRet:
		s := proto.Size(x.QuickMatchRet)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type QuickMatch struct {
	Uid    int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	GameID string `protobuf:"bytes,2,opt,name=gameID,proto3" json:"gameID,omitempty"`
}

func (m *QuickMatch) Reset()                    { *m = QuickMatch{} }
func (m *QuickMatch) String() string            { return proto.CompactTextString(m) }
func (*QuickMatch) ProtoMessage()               {}
func (*QuickMatch) Descriptor() ([]byte, []int) { return fileDescriptorHall, []int{2} }

func (m *QuickMatch) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *QuickMatch) GetGameID() string {
	if m != nil {
		return m.GameID
	}
	return ""
}

type QuickMatchRet struct {
	Result      HallResult        `protobuf:"varint,1,opt,name=result,proto3,enum=hall.HallResult" json:"result,omitempty"`
	MatchResult *QuickMatchResult `protobuf:"bytes,2,opt,name=matchResult" json:"matchResult,omitempty"`
}

func (m *QuickMatchRet) Reset()                    { *m = QuickMatchRet{} }
func (m *QuickMatchRet) String() string            { return proto.CompactTextString(m) }
func (*QuickMatchRet) ProtoMessage()               {}
func (*QuickMatchRet) Descriptor() ([]byte, []int) { return fileDescriptorHall, []int{3} }

func (m *QuickMatchRet) GetResult() HallResult {
	if m != nil {
		return m.Result
	}
	return HallResult_success
}

func (m *QuickMatchRet) GetMatchResult() *QuickMatchResult {
	if m != nil {
		return m.MatchResult
	}
	return nil
}

type CancelMatch struct {
	Uid    int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	GameID string `protobuf:"bytes,2,opt,name=gameID,proto3" json:"gameID,omitempty"`
}

func (m *CancelMatch) Reset()                    { *m = CancelMatch{} }
func (m *CancelMatch) String() string            { return proto.CompactTextString(m) }
func (*CancelMatch) ProtoMessage()               {}
func (*CancelMatch) Descriptor() ([]byte, []int) { return fileDescriptorHall, []int{4} }

func (m *CancelMatch) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CancelMatch) GetGameID() string {
	if m != nil {
		return m.GameID
	}
	return ""
}

type CancelMatchRet struct {
	Result HallResult `protobuf:"varint,1,opt,name=result,proto3,enum=hall.HallResult" json:"result,omitempty"`
}

func (m *CancelMatchRet) Reset()                    { *m = CancelMatchRet{} }
func (m *CancelMatchRet) String() string            { return proto.CompactTextString(m) }
func (*CancelMatchRet) ProtoMessage()               {}
func (*CancelMatchRet) Descriptor() ([]byte, []int) { return fileDescriptorHall, []int{5} }

func (m *CancelMatchRet) GetResult() HallResult {
	if m != nil {
		return m.Result
	}
	return HallResult_success
}

// 快速匹配推送
type QuickMatchResult struct {
	RoomID  string `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID,omitempty"`
	Token   string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QuickMatchResult) Reset()                    { *m = QuickMatchResult{} }
func (m *QuickMatchResult) String() string            { return proto.CompactTextString(m) }
func (*QuickMatchResult) ProtoMessage()               {}
func (*QuickMatchResult) Descriptor() ([]byte, []int) { return fileDescriptorHall, []int{6} }

func (m *QuickMatchResult) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *QuickMatchResult) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *QuickMatchResult) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*HallRequest)(nil), "hall.HallRequest")
	proto.RegisterType((*HallResponse)(nil), "hall.HallResponse")
	proto.RegisterType((*QuickMatch)(nil), "hall.quick_match")
	proto.RegisterType((*QuickMatchRet)(nil), "hall.quick_match_ret")
	proto.RegisterType((*CancelMatch)(nil), "hall.cancel_match")
	proto.RegisterType((*CancelMatchRet)(nil), "hall.cancel_match_ret")
	proto.RegisterType((*QuickMatchResult)(nil), "hall.quick_match_result")
	proto.RegisterEnum("hall.HallResult", HallResult_name, HallResult_value)
}
func (m *HallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HallRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Session != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.Session))
	}
	if m.Request != nil {
		nn1, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *HallRequest_QuickMatch) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.QuickMatch != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.QuickMatch.Size()))
		n2, err := m.QuickMatch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *HallResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HallResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Session != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.Session))
	}
	if m.Response != nil {
		nn3, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *HallResponse_Exception) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintHall(dAtA, i, uint64(m.Exception))
	return i, nil
}
func (m *HallResponse_QuickMatchRet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.QuickMatchRet != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.QuickMatchRet.Size()))
		n4, err := m.QuickMatchRet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *QuickMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuickMatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.Uid))
	}
	if len(m.GameID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHall(dAtA, i, uint64(len(m.GameID)))
		i += copy(dAtA[i:], m.GameID)
	}
	return i, nil
}

func (m *QuickMatchRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuickMatchRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.Result))
	}
	if m.MatchResult != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.MatchResult.Size()))
		n5, err := m.MatchResult.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *CancelMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelMatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.Uid))
	}
	if len(m.GameID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHall(dAtA, i, uint64(len(m.GameID)))
		i += copy(dAtA[i:], m.GameID)
	}
	return i, nil
}

func (m *CancelMatchRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelMatchRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *QuickMatchResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuickMatchResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoomID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHall(dAtA, i, uint64(len(m.RoomID)))
		i += copy(dAtA[i:], m.RoomID)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHall(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHall(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	return i, nil
}

func encodeVarintHall(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HallRequest) Size() (n int) {
	var l int
	_ = l
	if m.Session != 0 {
		n += 1 + sovHall(uint64(m.Session))
	}
	if m.Request != nil {
		n += m.Request.Size()
	}
	return n
}

func (m *HallRequest_QuickMatch) Size() (n int) {
	var l int
	_ = l
	if m.QuickMatch != nil {
		l = m.QuickMatch.Size()
		n += 1 + l + sovHall(uint64(l))
	}
	return n
}
func (m *HallResponse) Size() (n int) {
	var l int
	_ = l
	if m.Session != 0 {
		n += 1 + sovHall(uint64(m.Session))
	}
	if m.Response != nil {
		n += m.Response.Size()
	}
	return n
}

func (m *HallResponse_Exception) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovHall(uint64(m.Exception))
	return n
}
func (m *HallResponse_QuickMatchRet) Size() (n int) {
	var l int
	_ = l
	if m.QuickMatchRet != nil {
		l = m.QuickMatchRet.Size()
		n += 1 + l + sovHall(uint64(l))
	}
	return n
}
func (m *QuickMatch) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovHall(uint64(m.Uid))
	}
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovHall(uint64(l))
	}
	return n
}

func (m *QuickMatchRet) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovHall(uint64(m.Result))
	}
	if m.MatchResult != nil {
		l = m.MatchResult.Size()
		n += 1 + l + sovHall(uint64(l))
	}
	return n
}

func (m *CancelMatch) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovHall(uint64(m.Uid))
	}
	l = len(m.GameID)
	if l > 0 {
		n += 1 + l + sovHall(uint64(l))
	}
	return n
}

func (m *CancelMatchRet) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovHall(uint64(m.Result))
	}
	return n
}

func (m *QuickMatchResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomID)
	if l > 0 {
		n += 1 + l + sovHall(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovHall(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovHall(uint64(l))
	}
	return n
}

func sovHall(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHall(x uint64) (n int) {
	return sovHall(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			m.Session = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Session |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuickMatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QuickMatch{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &HallRequest_QuickMatch{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HallResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			m.Session = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Session |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exception", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Response = &HallResponse_Exception{v}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuickMatchRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QuickMatchRet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &HallResponse_QuickMatchRet{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuickMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: quick_match: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: quick_match: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuickMatchRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: quick_match_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: quick_match_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (HallResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatchResult == nil {
				m.MatchResult = &QuickMatchResult{}
			}
			if err := m.MatchResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cancel_match: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cancel_match: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelMatchRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cancel_match_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cancel_match_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (HallResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuickMatchResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: quick_match_result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: quick_match_result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHall(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHall
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHall
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHall
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHall(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHall = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHall   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("hall.proto", fileDescriptorHall) }

var fileDescriptorHall = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xbf, 0x6e, 0xe2, 0x40,
	0x10, 0xc6, 0xbd, 0x70, 0xc0, 0x79, 0x0c, 0x77, 0xbe, 0xd5, 0x25, 0xb2, 0x52, 0x58, 0x96, 0x2b,
	0x27, 0x05, 0x45, 0x28, 0x12, 0x45, 0xa2, 0x41, 0x14, 0xa6, 0x48, 0xb3, 0x75, 0x24, 0xe4, 0x98,
	0x11, 0x20, 0xfc, 0x07, 0x76, 0xd7, 0x12, 0xef, 0x91, 0x26, 0x8f, 0x94, 0x32, 0x8f, 0x10, 0x91,
	0x17, 0x89, 0x76, 0x6d, 0x84, 0x13, 0xa2, 0x48, 0x34, 0xd6, 0x7e, 0x3b, 0xdf, 0xcc, 0xf7, 0x93,
	0x67, 0x01, 0x16, 0x51, 0x92, 0xf4, 0xd7, 0x3c, 0x97, 0x39, 0xfd, 0xa5, 0xce, 0xfe, 0x1c, 0xac,
	0x30, 0x4a, 0x12, 0x86, 0x9b, 0x02, 0x85, 0xa4, 0x0e, 0x74, 0x04, 0x0a, 0xb1, 0xcc, 0x33, 0x87,
	0x78, 0x24, 0x68, 0xb1, 0xbd, 0xa4, 0x03, 0x80, 0x4d, 0xb1, 0x8c, 0x57, 0xf7, 0x91, 0x8c, 0x17,
	0x4e, 0xcb, 0x23, 0x81, 0x75, 0xfd, 0xaf, 0xaf, 0xe7, 0xe9, 0xfb, 0x69, 0xaa, 0x0a, 0xa1, 0xc1,
	0x6a, 0xb6, 0x91, 0x09, 0x1d, 0x5e, 0x4e, 0xf6, 0x9f, 0x08, 0x74, 0xcb, 0x24, 0xb1, 0xce, 0x33,
	0x81, 0x3f, 0x44, 0xb9, 0x60, 0xe2, 0x36, 0xc6, 0xb5, 0x54, 0xb5, 0xa6, 0x47, 0x82, 0x5e, 0x68,
	0xb0, 0xc3, 0x15, 0x1d, 0x42, 0xef, 0x90, 0xc1, 0x50, 0x56, 0x34, 0x67, 0x47, 0x34, 0x53, 0x8e,
	0x32, 0x34, 0xd8, 0x67, 0xf7, 0x08, 0xe0, 0x37, 0xaf, 0x20, 0xfc, 0x1b, 0xb0, 0x6a, 0x7e, 0x6a,
	0x43, 0xb3, 0x58, 0xce, 0x34, 0x4f, 0x93, 0xa9, 0x23, 0x3d, 0x87, 0xf6, 0x3c, 0x4a, 0x71, 0x32,
	0x76, 0x1a, 0x1e, 0x09, 0x4c, 0x56, 0x29, 0x7f, 0x0b, 0x7f, 0xbf, 0x04, 0xd1, 0x4b, 0x68, 0x73,
	0x14, 0x45, 0x22, 0x75, 0xff, 0x9f, 0xfd, 0xdf, 0x51, 0x9f, 0x69, 0x59, 0x60, 0x95, 0x81, 0xde,
	0x81, 0x95, 0x96, 0x38, 0xda, 0xdf, 0xd0, 0xfc, 0xce, 0x77, 0xfc, 0xba, 0xad, 0x6e, 0xf6, 0x6f,
	0xa1, 0x1b, 0x47, 0x59, 0x8c, 0xc9, 0xc9, 0xcc, 0x43, 0xb0, 0xeb, 0x9d, 0x27, 0x42, 0xfb, 0x0f,
	0x40, 0x8f, 0xd9, 0x54, 0x18, 0xcf, 0xf3, 0x74, 0x32, 0xd6, 0x03, 0x4c, 0x56, 0x29, 0xfa, 0x1f,
	0x5a, 0x32, 0x5f, 0x61, 0x56, 0x31, 0x94, 0x42, 0x2d, 0x3d, 0x9a, 0xcd, 0x38, 0x0a, 0xa1, 0x17,
	0x6b, 0xb2, 0xbd, 0xbc, 0xba, 0x00, 0xab, 0x16, 0x4a, 0x2d, 0xe8, 0x88, 0x22, 0x8e, 0x51, 0x08,
	0xdb, 0x18, 0xd9, 0x2f, 0x3b, 0x97, 0xbc, 0xee, 0x5c, 0xf2, 0xb6, 0x73, 0xc9, 0xf3, 0xbb, 0x6b,
	0x3c, 0xb6, 0xf5, 0x1b, 0x1e, 0x7c, 0x04, 0x00, 0x00, 0xff, 0xff, 0x25, 0x28, 0x66, 0x06, 0xd1,
	0x02, 0x00, 0x00,
}
