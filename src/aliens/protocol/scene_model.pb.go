// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scene_model.proto

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Vector struct {
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (m *Vector) Reset()                    { *m = Vector{} }
func (m *Vector) String() string            { return proto.CompactTextString(m) }
func (*Vector) ProtoMessage()               {}
func (*Vector) Descriptor() ([]byte, []int) { return fileDescriptorSceneModel, []int{0} }

func (m *Vector) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vector) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Vector) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

type Entity struct {
	Id        string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TypeName  string  `protobuf:"bytes,2,opt,name=typeName,proto3" json:"typeName,omitempty"`
	Position  *Vector `protobuf:"bytes,3,opt,name=position" json:"position,omitempty"`
	Direction *Vector `protobuf:"bytes,4,opt,name=direction" json:"direction,omitempty"`
	Layer     uint32  `protobuf:"varint,5,opt,name=layer,proto3" json:"layer,omitempty"`
	Yaw       float32 `protobuf:"fixed32,6,opt,name=yaw,proto3" json:"yaw,omitempty"`
	TopSpeed  float32 `protobuf:"fixed32,7,opt,name=topSpeed,proto3" json:"topSpeed,omitempty"`
	TopSpeedY float32 `protobuf:"fixed32,8,opt,name=topSpeedY,proto3" json:"topSpeedY,omitempty"`
	Attr      []byte  `protobuf:"bytes,9,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (m *Entity) Reset()                    { *m = Entity{} }
func (m *Entity) String() string            { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()               {}
func (*Entity) Descriptor() ([]byte, []int) { return fileDescriptorSceneModel, []int{1} }

func (m *Entity) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Entity) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

func (m *Entity) GetPosition() *Vector {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *Entity) GetDirection() *Vector {
	if m != nil {
		return m.Direction
	}
	return nil
}

func (m *Entity) GetLayer() uint32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *Entity) GetYaw() float32 {
	if m != nil {
		return m.Yaw
	}
	return 0
}

func (m *Entity) GetTopSpeed() float32 {
	if m != nil {
		return m.TopSpeed
	}
	return 0
}

func (m *Entity) GetTopSpeedY() float32 {
	if m != nil {
		return m.TopSpeedY
	}
	return 0
}

func (m *Entity) GetAttr() []byte {
	if m != nil {
		return m.Attr
	}
	return nil
}

func init() {
	proto.RegisterType((*Vector)(nil), "protocol.Vector")
	proto.RegisterType((*Entity)(nil), "protocol.Entity")
}
func (m *Vector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.X != 0 {
		dAtA[i] = 0xd
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.X))))
		i += 4
	}
	if m.Y != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Y))))
		i += 4
	}
	if m.Z != 0 {
		dAtA[i] = 0x1d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Z))))
		i += 4
	}
	return i, nil
}

func (m *Entity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSceneModel(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.TypeName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSceneModel(dAtA, i, uint64(len(m.TypeName)))
		i += copy(dAtA[i:], m.TypeName)
	}
	if m.Position != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSceneModel(dAtA, i, uint64(m.Position.Size()))
		n1, err := m.Position.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Direction != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSceneModel(dAtA, i, uint64(m.Direction.Size()))
		n2, err := m.Direction.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Layer != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSceneModel(dAtA, i, uint64(m.Layer))
	}
	if m.Yaw != 0 {
		dAtA[i] = 0x35
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Yaw))))
		i += 4
	}
	if m.TopSpeed != 0 {
		dAtA[i] = 0x3d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TopSpeed))))
		i += 4
	}
	if m.TopSpeedY != 0 {
		dAtA[i] = 0x45
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TopSpeedY))))
		i += 4
	}
	if len(m.Attr) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSceneModel(dAtA, i, uint64(len(m.Attr)))
		i += copy(dAtA[i:], m.Attr)
	}
	return i, nil
}

func encodeVarintSceneModel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Vector) Size() (n int) {
	var l int
	_ = l
	if m.X != 0 {
		n += 5
	}
	if m.Y != 0 {
		n += 5
	}
	if m.Z != 0 {
		n += 5
	}
	return n
}

func (m *Entity) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSceneModel(uint64(l))
	}
	l = len(m.TypeName)
	if l > 0 {
		n += 1 + l + sovSceneModel(uint64(l))
	}
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovSceneModel(uint64(l))
	}
	if m.Direction != nil {
		l = m.Direction.Size()
		n += 1 + l + sovSceneModel(uint64(l))
	}
	if m.Layer != 0 {
		n += 1 + sovSceneModel(uint64(m.Layer))
	}
	if m.Yaw != 0 {
		n += 5
	}
	if m.TopSpeed != 0 {
		n += 5
	}
	if m.TopSpeedY != 0 {
		n += 5
	}
	l = len(m.Attr)
	if l > 0 {
		n += 1 + l + sovSceneModel(uint64(l))
	}
	return n
}

func sovSceneModel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSceneModel(x uint64) (n int) {
	return sovSceneModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSceneModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Y = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Z = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipSceneModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSceneModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSceneModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSceneModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSceneModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSceneModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSceneModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSceneModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSceneModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &Vector{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSceneModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSceneModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Direction == nil {
				m.Direction = &Vector{}
			}
			if err := m.Direction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer", wireType)
			}
			m.Layer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSceneModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layer |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yaw", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Yaw = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TopSpeed = float32(math.Float32frombits(v))
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopSpeedY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TopSpeedY = float32(math.Float32frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSceneModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSceneModel
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attr = append(m.Attr[:0], dAtA[iNdEx:postIndex]...)
			if m.Attr == nil {
				m.Attr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSceneModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSceneModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSceneModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSceneModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSceneModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSceneModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSceneModel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSceneModel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSceneModel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSceneModel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSceneModel   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("scene_model.proto", fileDescriptorSceneModel) }

var fileDescriptorSceneModel = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8e, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xdd, 0xb4, 0x8d, 0xc9, 0x58, 0x25, 0x0e, 0x1e, 0x16, 0x91, 0x10, 0x7a, 0xca, 0x41,
	0x72, 0xa8, 0x6f, 0x20, 0x78, 0xf5, 0xb0, 0x82, 0xe0, 0x49, 0x62, 0x32, 0x87, 0x85, 0x34, 0x1b,
	0xb6, 0x0b, 0x76, 0xfb, 0x04, 0x3e, 0x82, 0x8f, 0xe4, 0xd1, 0x47, 0x90, 0xf8, 0x22, 0x92, 0x09,
	0x4d, 0x4f, 0x9e, 0xf6, 0xff, 0x66, 0xff, 0x19, 0x3e, 0xb8, 0xdc, 0x56, 0xd4, 0xd2, 0xeb, 0xc6,
	0xd4, 0xd4, 0x14, 0x9d, 0x35, 0xce, 0x60, 0xc4, 0x4f, 0x65, 0x9a, 0xd5, 0x1a, 0xc2, 0x67, 0xaa,
	0x9c, 0xb1, 0xb8, 0x04, 0xb1, 0x93, 0x22, 0x13, 0x79, 0xa0, 0xc4, 0x6e, 0x20, 0x2f, 0x83, 0x91,
	0xfc, 0x40, 0x7b, 0x39, 0x1b, 0x69, 0xbf, 0xfa, 0x08, 0x20, 0x7c, 0x68, 0x9d, 0x76, 0x1e, 0x2f,
	0x20, 0xd0, 0x35, 0x6f, 0xc5, 0x2a, 0xd0, 0x35, 0x5e, 0x43, 0xe4, 0x7c, 0x47, 0x8f, 0xe5, 0x86,
	0x78, 0x3b, 0x56, 0x13, 0xe3, 0x2d, 0x44, 0x9d, 0xd9, 0x6a, 0xa7, 0x4d, 0xcb, 0xb7, 0xce, 0xd6,
	0x49, 0x71, 0xf0, 0x28, 0x46, 0x09, 0x35, 0x35, 0xb0, 0x80, 0xb8, 0xd6, 0x96, 0x2a, 0xae, 0xcf,
	0xff, 0xa9, 0x1f, 0x2b, 0x78, 0x05, 0x8b, 0xa6, 0xf4, 0x64, 0xe5, 0x22, 0x13, 0xf9, 0xb9, 0x1a,
	0x01, 0x13, 0x98, 0xf9, 0xf2, 0x5d, 0x86, 0xac, 0x3e, 0x44, 0x36, 0x34, 0xdd, 0x53, 0x47, 0x54,
	0xcb, 0x53, 0x1e, 0x4f, 0x8c, 0x37, 0x10, 0x1f, 0xf2, 0x8b, 0x8c, 0xf8, 0xf3, 0x38, 0x40, 0x84,
	0x79, 0xe9, 0x9c, 0x95, 0x71, 0x26, 0xf2, 0xa5, 0xe2, 0x7c, 0x9f, 0x7c, 0xf5, 0xa9, 0xf8, 0xee,
	0x53, 0xf1, 0xd3, 0xa7, 0xe2, 0xf3, 0x37, 0x3d, 0x79, 0x0b, 0xd9, 0xf1, 0xee, 0x2f, 0x00, 0x00,
	0xff, 0xff, 0xe4, 0xa9, 0x43, 0x55, 0x76, 0x01, 0x00, 0x00,
}
