// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: passport_interface.proto

package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 普通注册账号
type UserRegister struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Server   int32  `protobuf:"varint,3,opt,name=server,proto3" json:"server,omitempty"`
}

func (m *UserRegister) Reset()                    { *m = UserRegister{} }
func (m *UserRegister) String() string            { return proto.CompactTextString(m) }
func (*UserRegister) ProtoMessage()               {}
func (*UserRegister) Descriptor() ([]byte, []int) { return fileDescriptorPassportInterface, []int{0} }

func (m *UserRegister) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserRegister) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UserRegister) GetServer() int32 {
	if m != nil {
		return m.Server
	}
	return 0
}

// 登录服务器注册账号返回
type UserRegisterRet struct {
	Result RegisterResult `protobuf:"varint,1,opt,name=result,proto3,enum=protocol.RegisterResult" json:"result,omitempty"`
	Uid    int64          `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Token  string         `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Msg    string         `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *UserRegisterRet) Reset()                    { *m = UserRegisterRet{} }
func (m *UserRegisterRet) String() string            { return proto.CompactTextString(m) }
func (*UserRegisterRet) ProtoMessage()               {}
func (*UserRegisterRet) Descriptor() ([]byte, []int) { return fileDescriptorPassportInterface, []int{1} }

func (m *UserRegisterRet) GetResult() RegisterResult {
	if m != nil {
		return m.Result
	}
	return RegisterResult_registerSuccess
}

func (m *UserRegisterRet) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserRegisterRet) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UserRegisterRet) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 用户名密码登录服务器
type UserLogin struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *UserLogin) Reset()                    { *m = UserLogin{} }
func (m *UserLogin) String() string            { return proto.CompactTextString(m) }
func (*UserLogin) ProtoMessage()               {}
func (*UserLogin) Descriptor() ([]byte, []int) { return fileDescriptorPassportInterface, []int{2} }

func (m *UserLogin) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserLogin) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// 登录服务器返回
type UserLoginRet struct {
	Result LoginResult `protobuf:"varint,1,opt,name=result,proto3,enum=protocol.LoginResult" json:"result,omitempty"`
	Uid    int64       `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Token  string      `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Msg    string      `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *UserLoginRet) Reset()                    { *m = UserLoginRet{} }
func (m *UserLoginRet) String() string            { return proto.CompactTextString(m) }
func (*UserLoginRet) ProtoMessage()               {}
func (*UserLoginRet) Descriptor() ([]byte, []int) { return fileDescriptorPassportInterface, []int{3} }

func (m *UserLoginRet) GetResult() LoginResult {
	if m != nil {
		return m.Result
	}
	return LoginResult_loginSuccess
}

func (m *UserLoginRet) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserLoginRet) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UserLoginRet) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 渠道登录
type ChannelLogin struct {
	Channel    string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	ChannelUID string `protobuf:"bytes,2,opt,name=channelUID,proto3" json:"channelUID,omitempty"`
	Sdk        string `protobuf:"bytes,3,opt,name=sdk,proto3" json:"sdk,omitempty"`
	Ip         string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (m *ChannelLogin) Reset()                    { *m = ChannelLogin{} }
func (m *ChannelLogin) String() string            { return proto.CompactTextString(m) }
func (*ChannelLogin) ProtoMessage()               {}
func (*ChannelLogin) Descriptor() ([]byte, []int) { return fileDescriptorPassportInterface, []int{4} }

func (m *ChannelLogin) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *ChannelLogin) GetChannelUID() string {
	if m != nil {
		return m.ChannelUID
	}
	return ""
}

func (m *ChannelLogin) GetSdk() string {
	if m != nil {
		return m.Sdk
	}
	return ""
}

func (m *ChannelLogin) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// 渠道登录结果
type ChannelLoginRet struct {
	Uid   int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *ChannelLoginRet) Reset()                    { *m = ChannelLoginRet{} }
func (m *ChannelLoginRet) String() string            { return proto.CompactTextString(m) }
func (*ChannelLoginRet) ProtoMessage()               {}
func (*ChannelLoginRet) Descriptor() ([]byte, []int) { return fileDescriptorPassportInterface, []int{5} }

func (m *ChannelLoginRet) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ChannelLoginRet) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// token 登录
type TokenLogin struct {
	Uid   int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *TokenLogin) Reset()                    { *m = TokenLogin{} }
func (m *TokenLogin) String() string            { return proto.CompactTextString(m) }
func (*TokenLogin) ProtoMessage()               {}
func (*TokenLogin) Descriptor() ([]byte, []int) { return fileDescriptorPassportInterface, []int{6} }

func (m *TokenLogin) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *TokenLogin) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type TokenLoginRet struct {
	Result LoginResult `protobuf:"varint,1,opt,name=result,proto3,enum=protocol.LoginResult" json:"result,omitempty"`
}

func (m *TokenLoginRet) Reset()                    { *m = TokenLoginRet{} }
func (m *TokenLoginRet) String() string            { return proto.CompactTextString(m) }
func (*TokenLoginRet) ProtoMessage()               {}
func (*TokenLoginRet) Descriptor() ([]byte, []int) { return fileDescriptorPassportInterface, []int{7} }

func (m *TokenLoginRet) GetResult() LoginResult {
	if m != nil {
		return m.Result
	}
	return LoginResult_loginSuccess
}

func init() {
	proto.RegisterType((*UserRegister)(nil), "protocol.userRegister")
	proto.RegisterType((*UserRegisterRet)(nil), "protocol.userRegisterRet")
	proto.RegisterType((*UserLogin)(nil), "protocol.userLogin")
	proto.RegisterType((*UserLoginRet)(nil), "protocol.userLoginRet")
	proto.RegisterType((*ChannelLogin)(nil), "protocol.channelLogin")
	proto.RegisterType((*ChannelLoginRet)(nil), "protocol.channelLoginRet")
	proto.RegisterType((*TokenLogin)(nil), "protocol.tokenLogin")
	proto.RegisterType((*TokenLoginRet)(nil), "protocol.tokenLoginRet")
}
func (m *UserRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRegister) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if m.Server != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(m.Server))
	}
	return i, nil
}

func (m *UserRegisterRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRegisterRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(m.Result))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(m.Uid))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *UserLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *UserLoginRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLoginRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(m.Result))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(m.Uid))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *ChannelLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(len(m.Channel)))
		i += copy(dAtA[i:], m.Channel)
	}
	if len(m.ChannelUID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(len(m.ChannelUID)))
		i += copy(dAtA[i:], m.ChannelUID)
	}
	if len(m.Sdk) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(len(m.Sdk)))
		i += copy(dAtA[i:], m.Sdk)
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	return i, nil
}

func (m *ChannelLoginRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelLoginRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(m.Uid))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *TokenLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(m.Uid))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *TokenLoginRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenLoginRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPassportInterface(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func encodeVarintPassportInterface(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserRegister) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovPassportInterface(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovPassportInterface(uint64(l))
	}
	if m.Server != 0 {
		n += 1 + sovPassportInterface(uint64(m.Server))
	}
	return n
}

func (m *UserRegisterRet) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovPassportInterface(uint64(m.Result))
	}
	if m.Uid != 0 {
		n += 1 + sovPassportInterface(uint64(m.Uid))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPassportInterface(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPassportInterface(uint64(l))
	}
	return n
}

func (m *UserLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovPassportInterface(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovPassportInterface(uint64(l))
	}
	return n
}

func (m *UserLoginRet) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovPassportInterface(uint64(m.Result))
	}
	if m.Uid != 0 {
		n += 1 + sovPassportInterface(uint64(m.Uid))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPassportInterface(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPassportInterface(uint64(l))
	}
	return n
}

func (m *ChannelLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovPassportInterface(uint64(l))
	}
	l = len(m.ChannelUID)
	if l > 0 {
		n += 1 + l + sovPassportInterface(uint64(l))
	}
	l = len(m.Sdk)
	if l > 0 {
		n += 1 + l + sovPassportInterface(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovPassportInterface(uint64(l))
	}
	return n
}

func (m *ChannelLoginRet) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovPassportInterface(uint64(m.Uid))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPassportInterface(uint64(l))
	}
	return n
}

func (m *TokenLogin) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovPassportInterface(uint64(m.Uid))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPassportInterface(uint64(l))
	}
	return n
}

func (m *TokenLoginRet) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovPassportInterface(uint64(m.Result))
	}
	return n
}

func sovPassportInterface(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPassportInterface(x uint64) (n int) {
	return sovPassportInterface(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassportInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: userRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: userRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassportInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassportInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			m.Server = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Server |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPassportInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassportInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRegisterRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassportInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: userRegisterRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: userRegisterRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (RegisterResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassportInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassportInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassportInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassportInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassportInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: userLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: userLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassportInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassportInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassportInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassportInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLoginRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassportInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: userLoginRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: userLoginRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (LoginResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassportInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassportInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassportInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassportInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassportInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: channelLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: channelLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassportInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassportInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sdk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassportInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sdk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassportInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassportInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassportInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelLoginRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassportInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: channelLoginRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: channelLoginRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassportInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassportInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassportInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassportInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: tokenLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: tokenLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassportInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassportInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassportInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenLoginRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassportInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: tokenLoginRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: tokenLoginRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (LoginResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPassportInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassportInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPassportInterface(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPassportInterface
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPassportInterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPassportInterface
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPassportInterface
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPassportInterface(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPassportInterface = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPassportInterface   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("passport_interface.proto", fileDescriptorPassportInterface) }

var fileDescriptorPassportInterface = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x50, 0x41, 0x4f, 0x32, 0x31,
	0x14, 0x4c, 0x97, 0x0f, 0x3e, 0x78, 0x41, 0x30, 0x0d, 0x9a, 0x86, 0xc3, 0x86, 0xec, 0x89, 0x8b,
	0xc4, 0xa8, 0x17, 0x2f, 0x1e, 0xd4, 0x8b, 0x89, 0xa7, 0x26, 0x5e, 0x35, 0x2b, 0x3c, 0x71, 0x65,
	0xd9, 0x6e, 0xda, 0x22, 0x27, 0xff, 0x9f, 0x47, 0x7f, 0x82, 0xe1, 0x97, 0x98, 0xd7, 0x16, 0xd8,
	0x18, 0x0f, 0x6a, 0x3c, 0x75, 0xa6, 0x6f, 0xfa, 0x66, 0xa6, 0x20, 0xca, 0xd4, 0x98, 0x52, 0x69,
	0x7b, 0x97, 0x15, 0x16, 0xf5, 0x43, 0x3a, 0xc6, 0x51, 0xa9, 0x95, 0x55, 0xbc, 0xe9, 0x8e, 0xb1,
	0xca, 0xfb, 0xbd, 0x8d, 0x66, 0xae, 0x26, 0x98, 0xfb, 0x79, 0x72, 0x0b, 0xed, 0x85, 0x41, 0x2d,
	0x71, 0x9a, 0x19, 0x8b, 0x9a, 0xf7, 0xa1, 0x49, 0xbc, 0x48, 0xe7, 0x28, 0xd8, 0x80, 0x0d, 0x5b,
	0x72, 0xc3, 0x69, 0x46, 0x3b, 0x96, 0x4a, 0x4f, 0x44, 0xe4, 0x67, 0x6b, 0xce, 0xf7, 0xa1, 0x61,
	0x50, 0x3f, 0xa3, 0x16, 0xb5, 0x01, 0x1b, 0xd6, 0x65, 0x60, 0xc9, 0x0b, 0x74, 0xab, 0xfb, 0x25,
	0x5a, 0x7e, 0x08, 0x0d, 0x8d, 0x66, 0x91, 0x5b, 0x67, 0xd0, 0x39, 0x12, 0xa3, 0x75, 0xc6, 0xd1,
	0x56, 0x46, 0x73, 0x19, 0x74, 0x7c, 0x17, 0x6a, 0x8b, 0xcc, 0x7b, 0xd6, 0x24, 0x41, 0xde, 0x83,
	0xba, 0x55, 0x33, 0x2c, 0x9c, 0x5b, 0x4b, 0x7a, 0x42, 0xba, 0xb9, 0x99, 0x8a, 0x7f, 0xee, 0x8e,
	0x60, 0x72, 0x01, 0x2d, 0xb2, 0xbf, 0x56, 0xd3, 0xac, 0xf8, 0x6d, 0xb7, 0x64, 0xe9, 0xff, 0xc8,
	0x2d, 0xa1, 0x02, 0x07, 0x9f, 0x0a, 0xec, 0x6d, 0x0b, 0x04, 0xcd, 0x1f, 0xa5, 0x7f, 0x82, 0xf6,
	0xf8, 0x31, 0x2d, 0x0a, 0xcc, 0x7d, 0x01, 0x01, 0xff, 0x03, 0x0f, 0xf9, 0xd7, 0x94, 0xc7, 0x00,
	0x01, 0xde, 0x5c, 0x5d, 0x86, 0x02, 0x95, 0x1b, 0xda, 0x6d, 0x26, 0xb3, 0xe0, 0x47, 0x90, 0x77,
	0x20, 0xca, 0xca, 0x60, 0x16, 0x65, 0x65, 0x72, 0x0a, 0xdd, 0xaa, 0x17, 0xf5, 0x0c, 0xc1, 0xd9,
	0x17, 0xc1, 0xa3, 0x4a, 0xf0, 0xe4, 0x04, 0xc0, 0x01, 0x1f, 0xf2, 0xbb, 0xaf, 0xce, 0x60, 0x67,
	0xfb, 0xea, 0xe7, 0xdf, 0x7a, 0xde, 0x7e, 0x5d, 0xc5, 0xec, 0x6d, 0x15, 0xb3, 0xf7, 0x55, 0xcc,
	0xee, 0x1b, 0x4e, 0x7b, 0xfc, 0x11, 0x00, 0x00, 0xff, 0xff, 0xea, 0x9d, 0x11, 0xe8, 0x0a, 0x03,
	0x00, 0x00,
}
