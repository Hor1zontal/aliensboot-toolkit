// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gate_interface.proto

package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type KickOut struct {
	AuthID   int64    `protobuf:"varint,1,opt,name=authID,proto3" json:"authID,omitempty"`
	KickType KickType `protobuf:"varint,2,opt,name=kickType,proto3,enum=protocol.KickType" json:"kickType,omitempty"`
}

func (m *KickOut) Reset()                    { *m = KickOut{} }
func (m *KickOut) String() string            { return proto.CompactTextString(m) }
func (*KickOut) ProtoMessage()               {}
func (*KickOut) Descriptor() ([]byte, []int) { return fileDescriptorGateInterface, []int{0} }

func (m *KickOut) GetAuthID() int64 {
	if m != nil {
		return m.AuthID
	}
	return 0
}

func (m *KickOut) GetKickType() KickType {
	if m != nil {
		return m.KickType
	}
	return KickType_None
}

// 推送消息
type PushMessage struct {
	AuthID  int64  `protobuf:"varint,1,opt,name=authID,proto3" json:"authID,omitempty"`
	Data    []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Service string `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
}

func (m *PushMessage) Reset()                    { *m = PushMessage{} }
func (m *PushMessage) String() string            { return proto.CompactTextString(m) }
func (*PushMessage) ProtoMessage()               {}
func (*PushMessage) Descriptor() ([]byte, []int) { return fileDescriptorGateInterface, []int{1} }

func (m *PushMessage) GetAuthID() int64 {
	if m != nil {
		return m.AuthID
	}
	return 0
}

func (m *PushMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PushMessage) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

// 绑定服务 定向转发
type BindService struct {
	AuthID int64             `protobuf:"varint,1,opt,name=authID,proto3" json:"authID,omitempty"`
	Binds  map[string]string `protobuf:"bytes,2,rep,name=binds" json:"binds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *BindService) Reset()                    { *m = BindService{} }
func (m *BindService) String() string            { return proto.CompactTextString(m) }
func (*BindService) ProtoMessage()               {}
func (*BindService) Descriptor() ([]byte, []int) { return fileDescriptorGateInterface, []int{2} }

func (m *BindService) GetAuthID() int64 {
	if m != nil {
		return m.AuthID
	}
	return 0
}

func (m *BindService) GetBinds() map[string]string {
	if m != nil {
		return m.Binds
	}
	return nil
}

type BindServiceRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *BindServiceRet) Reset()                    { *m = BindServiceRet{} }
func (m *BindServiceRet) String() string            { return proto.CompactTextString(m) }
func (*BindServiceRet) ProtoMessage()               {}
func (*BindServiceRet) Descriptor() ([]byte, []int) { return fileDescriptorGateInterface, []int{3} }

func (m *BindServiceRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func init() {
	proto.RegisterType((*KickOut)(nil), "protocol.kick_out")
	proto.RegisterType((*PushMessage)(nil), "protocol.push_message")
	proto.RegisterType((*BindService)(nil), "protocol.bind_service")
	proto.RegisterType((*BindServiceRet)(nil), "protocol.bind_service_ret")
}
func (m *KickOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickOut) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AuthID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateInterface(dAtA, i, uint64(m.AuthID))
	}
	if m.KickType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGateInterface(dAtA, i, uint64(m.KickType))
	}
	return i, nil
}

func (m *PushMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AuthID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateInterface(dAtA, i, uint64(m.AuthID))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateInterface(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Service) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGateInterface(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	return i, nil
}

func (m *BindService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindService) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AuthID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateInterface(dAtA, i, uint64(m.AuthID))
	}
	if len(m.Binds) > 0 {
		for k, _ := range m.Binds {
			dAtA[i] = 0x12
			i++
			v := m.Binds[k]
			mapSize := 1 + len(k) + sovGateInterface(uint64(len(k))) + 1 + len(v) + sovGateInterface(uint64(len(v)))
			i = encodeVarintGateInterface(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateInterface(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGateInterface(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *BindServiceRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindServiceRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintGateInterface(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *KickOut) Size() (n int) {
	var l int
	_ = l
	if m.AuthID != 0 {
		n += 1 + sovGateInterface(uint64(m.AuthID))
	}
	if m.KickType != 0 {
		n += 1 + sovGateInterface(uint64(m.KickType))
	}
	return n
}

func (m *PushMessage) Size() (n int) {
	var l int
	_ = l
	if m.AuthID != 0 {
		n += 1 + sovGateInterface(uint64(m.AuthID))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovGateInterface(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovGateInterface(uint64(l))
	}
	return n
}

func (m *BindService) Size() (n int) {
	var l int
	_ = l
	if m.AuthID != 0 {
		n += 1 + sovGateInterface(uint64(m.AuthID))
	}
	if len(m.Binds) > 0 {
		for k, v := range m.Binds {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateInterface(uint64(len(k))) + 1 + len(v) + sovGateInterface(uint64(len(v)))
			n += mapEntrySize + 1 + sovGateInterface(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BindServiceRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func sovGateInterface(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGateInterface(x uint64) (n int) {
	return sovGateInterface(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KickOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kick_out: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kick_out: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthID", wireType)
			}
			m.AuthID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickType", wireType)
			}
			m.KickType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickType |= (KickType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: push_message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: push_message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthID", wireType)
			}
			m.AuthID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateInterface
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: bind_service: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: bind_service: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthID", wireType)
			}
			m.AuthID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Binds == nil {
				m.Binds = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateInterface
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateInterface
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGateInterface
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGateInterface
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGateInterface
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGateInterface(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGateInterface
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Binds[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindServiceRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: bind_service_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: bind_service_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGateInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGateInterface(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGateInterface
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateInterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateInterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGateInterface
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGateInterface
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGateInterface(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGateInterface = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGateInterface   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("gate_interface.proto", fileDescriptorGateInterface) }

var fileDescriptorGateInterface = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xb1, 0x6a, 0xc3, 0x30,
	0x10, 0x86, 0x51, 0x9c, 0xa4, 0xc9, 0xd5, 0x94, 0x20, 0x42, 0x11, 0x19, 0x8c, 0xeb, 0xc9, 0x74,
	0xf0, 0x90, 0x0e, 0x0d, 0x1d, 0x43, 0x3b, 0x94, 0x6e, 0x22, 0xbb, 0x51, 0xec, 0x6b, 0x62, 0xec,
	0xd8, 0x46, 0x92, 0x03, 0x7e, 0x94, 0xbe, 0x51, 0xc7, 0x3e, 0x42, 0xf1, 0x93, 0x14, 0xcb, 0x4e,
	0x93, 0x25, 0x93, 0xee, 0xbf, 0xfb, 0xf4, 0x71, 0x1c, 0xcc, 0x77, 0x42, 0x63, 0x98, 0xe4, 0x1a,
	0xe5, 0xa7, 0x88, 0x30, 0x28, 0x65, 0xa1, 0x0b, 0x3a, 0x31, 0x4f, 0x54, 0x64, 0x8b, 0x99, 0x99,
	0x1f, 0x8a, 0x18, 0xb3, 0x6e, 0xe6, 0x71, 0x98, 0xa4, 0x49, 0x94, 0x86, 0x45, 0xa5, 0xe9, 0x3d,
	0x8c, 0x45, 0xa5, 0xf7, 0xef, 0xaf, 0x8c, 0xb8, 0xc4, 0xb7, 0x78, 0x9f, 0x68, 0xd0, 0x31, 0x9b,
	0xba, 0x44, 0x36, 0x70, 0x89, 0x7f, 0xb7, 0xa4, 0xc1, 0x49, 0x19, 0x7c, 0xf4, 0x13, 0xfe, 0xcf,
	0x78, 0x1b, 0xb0, 0xcb, 0x4a, 0xed, 0xc3, 0x03, 0x2a, 0x25, 0x76, 0x78, 0xd5, 0x4b, 0x61, 0x18,
	0x0b, 0x2d, 0x98, 0xe5, 0x12, 0xdf, 0xe6, 0xa6, 0xa6, 0x0c, 0x6e, 0x14, 0xca, 0x63, 0x12, 0x21,
	0x1b, 0xba, 0xc4, 0x9f, 0xf2, 0x53, 0xf4, 0xbe, 0x08, 0xd8, 0xdb, 0x24, 0x8f, 0xc3, 0xbe, 0x71,
	0x55, 0xfb, 0x0c, 0xa3, 0x96, 0x53, 0x6c, 0xe0, 0x5a, 0xfe, 0xed, 0xf2, 0xe1, 0xbc, 0xeb, 0xe5,
	0xf7, 0x60, 0xdd, 0x32, 0x6f, 0xb9, 0x96, 0x35, 0xef, 0xf8, 0xc5, 0x0a, 0xe0, 0xdc, 0xa4, 0x33,
	0xb0, 0x52, 0xac, 0x8d, 0x7b, 0xca, 0xdb, 0x92, 0xce, 0x61, 0x74, 0x14, 0x59, 0xd5, 0x1d, 0x61,
	0xca, 0xbb, 0xf0, 0x32, 0x58, 0x11, 0xef, 0x11, 0x66, 0x97, 0xee, 0x50, 0xa2, 0xb9, 0xa6, 0x44,
	0x55, 0x65, 0xda, 0x28, 0x26, 0xbc, 0x4f, 0x6b, 0xfb, 0xbb, 0x71, 0xc8, 0x4f, 0xe3, 0x90, 0xdf,
	0xc6, 0x21, 0xdb, 0xb1, 0x59, 0xee, 0xe9, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xa8, 0xe2, 0xec,
	0xba, 0x01, 0x00, 0x00,
}
