syntax = "proto3";
package protocol;

import "room_model.proto";

//------------------------请求响应-----------------

//显示玩家信息，qqgameid为玩家的账号，gameCreated时取得。
message showUser {
    int64 playerid = 1;
}

message showUserRet {
    Player player = 1;
}

//----------------------单请求---------------

//创建房间 匹配成功后内部调用
message roomCreate {
    string appID = 1; //游戏id
    repeated Player players = 2; //匹配成功的玩家
}

//帧同步游戏初始化
message gameInit {
    bool openFraming = 1; //是否开启帧同步
    int32 fpsExpect = 2; //每秒的逻辑帧数量  默认5帧
}

message gameReady {
}

//发送游戏数据, data参数结构由游戏自拟，接收方收到的data与发送方发送的结构和内容一致。
//1v1游戏中，玩家A调用invoke gameData发送消息，玩家B使用onMessage gameData接收消息。
//但在2v2游戏中，有A、B、C、D四个玩家，A调用invoke gameData发送消息时，玩家B、C、D都可以收到，
//但是B、C、D并不知道消息的发送方为哪位玩家，所以在2v2游戏中调用invoke gameData发送消息时，需显示声明发送者的身份。
message gameData {
    string data = 1; //游戏数据 玩家自定义
}

//上报帧数据
message frameData {
    bytes data = 1; //帧数据 玩家自定义
}

//上报游戏结果
message uploadGameResult {
    repeated PlayerResult detail = 1; //成员结算记录
}

message uploadGameResultRet {
    int32 result = 1; // 0上报成功
}

//再来一局
message onceMore {

}

//
message onceMoreRet {
    
}

//message uploadGroupGameResult {
//    string groupId = 1; //组id
//    Record record = 2;  //组得分结果
//    repeated PlayerResult detail = 3; //成员结算记录
//}

//------------------------------推送消息--------------------------------------

//大厅收到游戏gameInit，开始匹配对手玩家，并建立双方玩家通信通道，完成后通过channelCreated将双方玩家信息发送给游戏，玩家信息格式如下：
message roomCreatedRet {
    repeated Player players = 1; //玩家信息
}

//收到所有玩家gameReady，大厅通知游戏开始。
message gameStartRet {

}

//接收其他玩家发送的data，接收到的数据与发送的数据结构和内容一致。
//比如，玩家A通过invoke gameData发送数据{x:1, y: 2}，玩家B通过onMessage gameData收到的数据也为{x:1, y: 2}。
message gameDataRet {
    string data = 1;
}

//帧同步游戏接收帧数据
message frameDataRet {
    int32 index = 1; //帧序号
    string data = 2; //帧数据
}

//玩家离开游戏 或房间
message leaveRet {
    int64 playerid = 1;
}

//玩家断开网络
message networkRet {
    int64 playerid = 1;
    bool online = 2; //是否在线
}

//玩家音频信息
message voiceRet {
    int64 playerid = 1;
    bool open = 2; //是否开放语言
    bool talking = 3; //是否正在讲话
}

//大厅通知游戏重置，此时游戏需重置到初始状态（不能通过刷新页面实现），并再次调用gameInit
message gameResetRet {

}